-- #############################################################################################################
-- #############################################################################################################
-- ****************************************volume 1 (plsql)************************************************
1 What is PL/SQL?
2 WHAT are the sections available for PL/SQL block Structure?
3 WHAT ARE THE available block Types in PL/SQL?
4 WHAT is the difference between variable and an identifier?
5  Write down the types of PL/SQL variable?
6 How can you comment on the PL/SQL code?
7 Define LOOP Structure?
8 What are the types of LOOP available?
9 What is an exception?
10 Write down the types of exception?
11 draw the basic steps to process an explicit cursor?
12 What is meant by procedure?
13 What are parameters?
14 WHAT is meant by function?
15 What is the basic difference between a procedure and function?
16 What are the different methods available for executing a function?
17 What is a package?
18 What are the advantages of using package?
19 Write five Oracle-Supplied packages names?
20 WHAT is meant by trigger?
21 Where can we Define  a trigger?
22 Waht do you know about trigger event types?
23 describe the types of Trigger?
24 write down the busineess application scenarios for implementing triggers?
25 Define trigger body?
26 What do you understand by dependent object and referenced object?
27 what do you understand  about local dependencies and remote dependencies? 


-- 1. create  compile and invoke the ADD_JOB procedure  and review the results

CREATE OR REPLACE PROCEDURE ADD_JOB(
    p_id JOBS.JOB_ID%TYPE,
    p_title JOBS.JOB_TITLE%TYPE
) IS
BEGIN
    INSERT INTO JOBS (job_id, job_title)
    VALUES (p_id, p_title);
    COMMIT;
END;
/

-- Invocation
EXECUTE  ADD_JOB('IT_TEST', 'Test Engineer');


-- Review Results
SELECT * FROM JOBS WHERE JOB_ID = 'IT_TEST';
  

-- 2. create a procedure called UPD_JOB to modify a job in the JOBS table.

CREATE OR REPLACE PROCEDURE UPD_JOB(
    p_id JOBS.JOB_ID%TYPE,
    p_title JOBS.JOB_TITLE%TYPE
) IS
BEGIN
    UPDATE JOBS
    SET job_title = p_title
    WHERE job_id = p_id;

    IF SQL%NOTFOUND THEN
        RAISE_APPLICATION_ERROR(-20010, 'Job not found for update');
    END IF;
END;
/

-- Invocation
EXECUTE UPD_JOB('IT_TEST', 'Senior Test Engineer');


-- 3. create a procedure called DEL_JOB to delete a job from the JOBS table.
CREATE OR REPLACE PROCEDURE DEL_JOB(
    p_id JOBS.JOB_ID%TYPE
) IS
BEGIN
    DELETE FROM JOBS
    WHERE job_id = p_id;

    IF SQL%NOTFOUND THEN
        RAISE_APPLICATION_ERROR(-20011, 'Job not found for deletion');
    END IF;
END;
/

-- Invocation
EXECUTE DEL_JOB('IT_TEST');

-- 4. create a procedure called GET_EMPLOYEE to query the EMPLOYEES table.
CREATE OR REPLACE PROCEDURE GET_EMPLOYEE (
    p_empid IN EMPLOYEES.EMPLOYEE_ID%TYPE,
    p_sal OUT EMPLOYEES.SALARY%TYPE,
    p_job OUT EMPLOYEES.JOB_ID%TYPE
) IS
BEGIN
    SELECT SALARY, JOB_ID INTO p_sal, p_job
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = p_empid;
END;
/

-- Invocation
VARIABLE v_sal NUMBER
VARIABLE v_job VARCHAR2(20)
EXECUTE GET_EMPLOYEE(100, :v_sal, :v_job)

-- 5. Create a procedure called RAISE_SALARY to increase the employee salary?
CREATE OR REPLACE PROCEDURE RAISE_SALARY (
    p_id IN EMPLOYEES.EMPLOYEE_ID%TYPE,
    p_percent IN NUMBER
) IS
BEGIN
    UPDATE EMPLOYEES
    SET salary = salary * (1 + p_percent / 100)
    WHERE employee_id = p_id;
END;
/

-- Invocation
EXECUTE RAISE_SALARY(100, 10);


-- 6. Create a procedure called QUERY_EMP to query the employee last_name and salary from the EMPLOYEES table.
CREATE OR REPLACE PROCEDURE QUERY_EMP (
    p_id IN EMPLOYEES.EMPLOYEE_ID%TYPE,
    p_name OUT EMPLOYEES.LAST_NAME%TYPE,
    p_salary OUT EMPLOYEES.SALARY%TYPE
) IS
BEGIN
    SELECT last_name, salary INTO p_name, p_salary
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = p_id;
END;
/

-- Invocation
DECLARE
    v_name EMPLOYEES.LAST_NAME%TYPE;
    v_sal  EMPLOYEES.SALARY%TYPE;
BEGIN
    QUERY_EMP(100, v_name, v_sal);
    DBMS_OUTPUT.PUT_LINE(v_name || ' earns ' || TO_CHAR(v_sal, '$999,999.00'));
END;

-- 7. Create a procedure called ADD_DEPT for adding new department into DEPARTMENTS table.
CREATE OR REPLACE PROCEDURE ADD_DEPT (
    p_name DEPARTMENTS.DEPARTMENT_NAME%TYPE,
    p_loc  DEPARTMENTS.LOCATION_ID%TYPE
) IS
BEGIN
    INSERT INTO DEPARTMENTS (department_id, department_name, location_id)
    VALUES (departments_seq.NEXTVAL, p_name, p_loc);
END;
/

-- Invocation
EXECUTE ADD_DEPT('RESEARCH', 1700);
-- 8. Create and invoke the GET_SAL function with a single input parameter and to returns the salary of inputted employee.
CREATE OR REPLACE FUNCTION GET_SAL (
    p_empid EMPLOYEES.EMPLOYEE_ID%TYPE
) RETURN NUMBER IS
    v_sal EMPLOYEES.SALARY%TYPE;
BEGIN
    SELECT SALARY INTO v_sal
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = p_empid;
    RETURN v_sal;
END;
/
-- Invocation
SELECT GET_SAL(100) AS salary FROM DUAL;

-- 9. Create and invoke the TAX function with a single input parameter and to returns the income tax based on simple flat tax rate for inputted salary.
CREATE OR REPLACE FUNCTION TAX (
    p_salary IN NUMBER
) RETURN NUMBER IS
    v_tax_rate CONSTANT NUMBER := 0.15;
BEGIN
    RETURN ROUND(p_salary * v_tax_rate, 2);
END;
/

-- Invocation
SELECT TAX(6000) AS tax_amount FROM DUAL;

-- 10. Create and invoke the GET_JOB function to return job_title.
CREATE OR REPLACE FUNCTION GET_JOB (
    p_job_id JOBS.JOB_ID%TYPE
) RETURN VARCHAR2 IS
    v_title JOBS.JOB_TITLE%TYPE;
BEGIN
    SELECT JOB_TITLE INTO v_title
    FROM JOBS
    WHERE JOB_ID = p_job_id;
    RETURN v_title;
END;
/

-- Invocation
SELECT GET_JOB('IT_PROG') AS job_title FROM DUAL;

-- 11. Create function called GET_ANNUAL_COMP to return the annual salary computed from employee's monthly salary and commission passed as parameters.
CREATE OR REPLACE FUNCTION GET_ANNUAL_COMP (
    p_salary IN NUMBER,
    p_commission IN NUMBER DEFAULT 0
) RETURN NUMBER IS
BEGIN
    RETURN ROUND((p_salary + NVL(p_commission, 0)) * 12, 2);
END;
/

-- Invocation
SELECT GET_ANNUAL_COMP(5000, 500) AS annual_comp FROM DUAL;

-- 12.Create a procedure ADD_EMPLOYEE to insert a new employee into the EMPLOYEES table. The procedure should call a VALID_DEPTID function to check wheather the department_id for the new employee exists in the DEPARTMENTS table.
CREATE OR REPLACE FUNCTION VALID_DEPTID (
    p_dept_id DEPARTMENTS.DEPARTMENT_ID%TYPE
) RETURN BOOLEAN IS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM DEPARTMENTS
    WHERE DEPARTMENT_ID = p_dept_id;
    RETURN v_count > 0;
END;
/

CREATE OR REPLACE PROCEDURE ADD_EMPLOYEE (
    p_empid     EMPLOYEES.EMPLOYEE_ID%TYPE,
    p_fname     EMPLOYEES.FIRST_NAME%TYPE,
    p_lname     EMPLOYEES.LAST_NAME%TYPE,
    p_email     EMPLOYEES.EMAIL%TYPE,
    p_hire_date EMPLOYEES.HIRE_DATE%TYPE,
    p_job_id    EMPLOYEES.JOB_ID%TYPE,
    p_salary    EMPLOYEES.SALARY%TYPE,
    p_dept_id   EMPLOYEES.DEPARTMENT_ID%TYPE
) IS
BEGIN
    IF VALID_DEPTID(p_dept_id) THEN
        INSERT INTO EMPLOYEES (employee_id, first_name, last_name, email, hire_date, job_id, salary, department_id)
        VALUES (p_empid, p_fname, p_lname, p_email, p_hire_date, p_job_id, p_salary, p_dept_id);
    ELSE
        RAISE_APPLICATION_ERROR(-20020, 'Invalid Department ID');
    END IF;
END;
/

-- Invocation (ensure department_id exists)
EXECUTE ADD_EMPLOYEE(300, 'Luna', 'Lovegood', 'luna.lovegood@hogwarts.com', SYSDATE, 'IT_PROG', 4500, 60);


-- 13. Create a  function called GET_ANNUAL_COMP to return the annual salary computed from an employee's monthly salary and commission passed as parameters. 2.2 Use the function in a SELECT statement against the EMPLOYEES table for employees in department 30.


CREATE OR REPLACE FUNCTION get_annual_comp(
p_sal IN employees.salary%TYPE,
p_comm IN employees.commission_pct%TYPE)
RETURN NUMBER IS
BEGIN 
RETURN (NVL(p_sal,0)*12+(NVL(p_comm,0)*NVL(p_sal,0)*12));
END get_annual_comp;
/

SELECT employee_id,last_name,get_annual_comp(salary,commission_pct)"Annual Compensation"
FROM employees
WHERE department_id=30
/







































1
CREATE OR REPLACE PROCEDURE ADD_JOB(
    p_id Jobs.job_id%TYPE, p_title jobs.job_title%TYPE) IS 
    BEGIN
    INSERT INTO JOBS (job_id, job_title)
    VALUES (p_id, p_title );
    END ADD_JOB;
    /

EXECUTE ADD_JOB ('IT_PROOG','Noorkxd');
2
    CREATE OR REPLACE PROCEDURE UPD_JOB(
    p_id Jobs.job_id%TYPE, p_title jobs.job_title%TYPE) IS 
    BEGIN
    UPDATE JOBS 
    SET job_title=p_title
    WHERE job_id =p_id;
END UPD_JOB;
    /

EXECUTE UPD_JOB ('IT_PROOG','shohan vaiar gf is hot');

3
CREATE OR REPLACE PROCEDURE DEL_JOB(
    p_id Jobs.job_id%TYPE, p_title jobs.job_title%TYPE) IS 
    BEGIN
    DELETE FROM JOBS 
    WHERE job_id =p_id;
END DEL_JOB;
/

EXECUTE DEL_JOB ('IT_PROOG','shohan vaiar gf is hot');

4





01.
create or replace procedure add_job(
p_jobid jobs.job_id%type,
p_jobtitle jobs.job_title%type) is
begin
insert into jobs(job_id, job_title)
values(p_jobid, p_jobtitle);
commit;
end add_job;
/

execute add_job('IT_DBA', 'Database Administration')

select job_id, job_title from jobs
where job_id='IT_DBA';

02.
create or replace procedure upd_job(
p_jobid jobs.job_id%type,
p_jobtitle jobs.job_title%type) is
begin
update jobs
set job_title=p_jobtitle
where job_id=p_jobid;
if sql%notfound then
raise_application_error(-20202, 'No job update');
end if;
end upd_job;
/

execute upd_job('IT_DBA', 'Database Administrator')

03.
create or replace procedure del_job(
p_jobid jobs.job_id%type,
p_jobtitle jobs.job_title%type) is
begin
delete from jobs
where job_id=p_jobid;
if sql%notfound then
raise_application_error(-20203, 'No row deleted');
end if;
end del_job;
/

execute del_job('IT_DBA', 'Database Administrator')

04.
create or replace procedure get_employee(
p_empid in employees.employee_id%type,
p_sal out employees.salary%type,
p_job out employees.job_id%type) is
begin
select salary, job_id into p_sal, p_job
from employees
where employee_id=p_empid;
end get_employee;
/

variable v_salary number
variable v_job varchar2(25)
execute get_employee(120, :v_salary, :v_job)

05.
create or replace procedure raise_salary (
p_id in employees.employee_id%type,
p_percent in number) is
begin
update employees
set salary = salary * (1+ p_percent/100)
where employee_id=p_id;
end raise_salary;
/

execute raise_salary(176, 10)

06.
create or replace procedure query_emp
(p_id in employees.employee_id%type,
p_name out employees.last_name%type,
p_salary out employees.salary%type) is
begin
select last_name, salary into p_name, p_salary
from employees
where employee_id=p_id;
end query_emp;
/

declare
v_emp_name employees.last_name%type;
v_sal employees.salary%type;
begin
query_emp (171, v_emp_name, v_sal);
dbms_output.put_line(v_emp_name || ' earns ' || to_char(v_sal, '$999,999.00'));
end;

07.
create or replace procedure add_dept(
p_name departments.department_name%type,
p_loc departments.location_id%type) is
begin
insert into departments(department_id, department_name, location_id)
values(departments_seq.nextval, p_name, p_loc);
end add_dept;
/

execute add_dept ('ADVERTISING', P_LOC=>1200)

08.
create or replace function get_sal (
p_empid employees.employee_id%type) return number is
p_sal employees.salary%type:=0;
begin
select salary into p_sal
from employees
where employee_id=p_empid;
return p_sal;
end get_sal;
/

execute dbms_output.put_line(get_sal(120))

09.
CREATE OR REPLACE FUNCTION tax(
    p_salary IN NUMBER
) RETURN NUMBER
IS
    v_tax_rate CONSTANT NUMBER := 0.15;
    v_tax_amount NUMBER;
BEGIN
    IF p_salary IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Salary cannot be null');
    END IF;
    
    IF p_salary < 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Salary cannot be negative');
    END IF;
    v_tax_amount := p_salary * v_tax_rate;
    v_tax_amount := GREATEST(v_tax_amount, 0);
    RETURN ROUND(v_tax_amount, 2);
    
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error calculating tax: ' || SQLERRM);
        RETURN NULL;
END tax;
/

10.
CREATE OR REPLACE FUNCTION get_job(
    p_job_id IN VARCHAR2
) RETURN VARCHAR2
IS
    v_job_title VARCHAR2(100);
BEGIN
SELECT job_title
    INTO v_job_title
    FROM jobs
    WHERE job_id = p_job_id;
    
    RETURN v_job_title;
end get_job;
/

execute dbms_output.put_line(get_job('IT_PROG'))

11.
CREATE OR REPLACE FUNCTION get_annual_comp(
    p_monthly_salary IN NUMBER,
    p_commission_pct IN NUMBER DEFAULT NULL
) RETURN NUMBER
IS
    v_annual_salary NUMBER;
    v_annual_commission NUMBER := 0;
BEGIN
v_annual_salary := p_monthly_salary * 12;
IF p_commission_pct IS NOT NULL THEN
        v_annual_commission := (v_annual_salary * p_commission_pct);
    END IF;
RETURN ROUND(v_annual_salary + v_annual_commission, 2);
END get_annual_comp;
/
execute dbms_output.put_line('Annual salary with commission: '||get_annual_comp(7500,.2))















SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE ADD_JOB(P_ID JOBS.JOB_ID%TYPE, P_TITLE JOBS.JOB_TITLE%TYPE) IS
  2  BEGIN
  3  INSERT INTO JOBS ( JOB_ID, JOB_TITLE)
  4  VALUES (P_ID,P_TITLE);
  5* END ADD_JOB;
SQL> /

Procedure created.

SQL> CXECUTE ADD_JOB('IT_PROGG', 'SHOAN');
SP2-0734: unknown command beginning "CXECUTE AD..." - rest of line ignored.
SQL> EXECUTE ADD_JOB('IT_PROGG', 'SHOAN');

PL/SQL procedure successfully completed.

SQL> SELECT * FRM JOBS WHERE JOB_ID='IT_PROGG';
SELECT * FRM JOBS WHERE JOB_ID='IT_PROGG'
         *
ERROR at line 1:
ORA-00923: FROM keyword not found where expected


SQL> ED
Wrote file afiedt.buf

  1* SELECT * FROM JOBS WHERE JOB_ID='IT_PROGG'
SQL> /

JOB_ID     JOB_TITLE                           MIN_SALARY MAX_SALARY
---------- ----------------------------------- ---------- ----------
IT_PROGG   SHOAN

SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE UPD_JOB(P_ID JOBS.JOB_ID%TYPE, P_TITLE JOBS.JOB_TITLE%TYPE) IS
  2  BEGIN
  3  UPDATE JOBS
  4  SET JOB_TITLE= 'NOOR VAI'
  5  WHERE JOB_ID='IT_PROGG';
  6* END ADD_JOB;
SQL> /

Warning: Procedure created with compilation errors.

SQL> SHOW ERROR
Errors for PROCEDURE UPD_JOB:

LINE/COL ERROR
-------- -----------------------------------------------------------------
6/5      PLS-00113: END identifier 'ADD_JOB' must match 'UPD_JOB' at line
         1, column 11

SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE UPD_JOB(P_ID JOBS.JOB_ID%TYPE, P_TITLE JOBS.JOB_TITLE%TYPE) IS
  2  BEGIN
  3  UPDATE JOBS
  4  SET JOB_TITLE= 'NOOR VAI'
  5  WHERE JOB_ID='IT_PROGG';
  6* END UPD_JOB;
SQL> /

Procedure created.

SQL> EXECUTE UPD_JOB
BEGIN UPD_JOB; END;

      *
ERROR at line 1:
ORA-06550: line 1, column 7:
PLS-00306: wrong number or types of arguments in call to 'UPD_JOB'
ORA-06550: line 1, column 7:
PL/SQL: Statement ignored


SQL> EXECUTE UPD_JOB;
BEGIN UPD_JOB; END;

      *
ERROR at line 1:
ORA-06550: line 1, column 7:
PLS-00306: wrong number or types of arguments in call to 'UPD_JOB'
ORA-06550: line 1, column 7:
PL/SQL: Statement ignored


SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE UPD_JOB(P_ID JOBS.JOB_ID%TYPE, P_TITLE JOBS.JOB_TITLE%TYPE) IS
  2  BEGIN
  3  UPDATE JOBS
  4  SET JOB_TITLE= P_TITLE
  5  WHERE JOB_ID=P_ID;
  6* END UPD_JOB;
SQL> /

Procedure created.

SQL> EXECUTE UPD_JOB('IT_PROGG', 'NOOR VAIER BIA KHAMU');

PL/SQL procedure successfully completed.

SQL> SELECT * FROM JOBS WHERE JOB_ID='IT_PROGG';

JOB_ID     JOB_TITLE                           MIN_SALARY MAX_SALARY
---------- ----------------------------------- ---------- ----------
IT_PROGG   NOOR VAIER BIA KHAMU

SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE UPD_JOB(P_ID JOBS.JOB_ID%TYPE) IS
  2  BEGIN
  3  DELETE FROM JOBS
  4  WHERE JOB_ID=P_ID;
  5* END UPD_JOB;
SQL> /

Procedure created.

SQL> EXECUTE UPD_JOB('IT_PROGG');

PL/SQL procedure successfully completed.

SQL> SELECT * FROM JOBS WHERE JOB_ID='IT_PROGG';

no rows selected

SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE GET_EMPLOYEE(P_ID IN EMPLOYEES.EMPLOYEE_ID%TYPE, P_SAL OUT EMPLOYEES.SALARY%TYPE, P_name out employees.last_name%type) IS
  2  BEGIN
  3  select SALARY, last_name into P_SAL, P_name
  4  from employees
  5  where employee_id=P_ID;
  6* END GET_EMPLOYEE;
SQL> /

Procedure created.

SQL> variable b_sal number
SQL> variable b_name varchar2(15)
SQL> execute GET_EMPLOYEE(100, :b_sal,:b_name);

PL/SQL procedure successfully completed.

SQL> print

     B_SAL
----------
     15500


B_NAME
--------------------------------------------------------------------------------
King

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id,P_SAL EMPLOYEES.SALARY%TYPE, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= P_SAL*12 +(1*P_persent/100*P_SAL*12)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Warning: Procedure created with compilation errors.

SQL> show error
Errors for PROCEDURE RAISE_SALARY:

LINE/COL ERROR
-------- -----------------------------------------------------------------
0/0      PL/SQL: Compilation unit analysis terminated
1/30     PLS-00488: 'EMPLOYEES.EMPLOYEE_ID' must be a type
SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type,P_SAL EMPLOYEES.SALARY%TYPE, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= P_SAL*12 +(1*P_persent/100*P_SAL*12)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= salary*12 +(1*P_persent/100*salary*12)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> execute raise_salary(100,10);

PL/SQL procedure successfully completed.

SQL> select salary from employees where employee_id=100;

    SALARY
----------
    204600

SQL> execute raise_salary(100,10);
BEGIN raise_salary(100,10); END;

*
ERROR at line 1:
ORA-01438: value larger than specified precision allowed for this column
ORA-06512: at "HR.RAISE_SALARY", line 3
ORA-06512: at line 1


SQL> execute raise_salary(100,20);
BEGIN raise_salary(100,20); END;

*
ERROR at line 1:
ORA-01438: value larger than specified precision allowed for this column
ORA-06512: at "HR.RAISE_SALARY", line 3
ORA-06512: at line 1


SQL> rollback
  2  /

Rollback complete.

SQL>
SQL> select salary from employees where employee_id=100;

    SALARY
----------
     15500

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= salary*12 +(1*P_persent/100*salary*12)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> execute raise_salary(100,10);

PL/SQL procedure successfully completed.

SQL> select salary from employees where employee_id=100;

    SALARY
----------
    204600

SQL> ed
Wrote file afiedt.buf

  1* select salary from employees where employee_id=100
SQL> /

    SALARY
----------
    204600

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= salary*12 +(1+P_persent/100*salary*12)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> execute raise_salary(100,10);
BEGIN raise_salary(100,10); END;

*
ERROR at line 1:
ORA-01438: value larger than specified precision allowed for this column
ORA-06512: at "HR.RAISE_SALARY", line 3
ORA-06512: at line 1


SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= salary *(1+P_persent/100)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> rollback
  2  /

Rollback complete.

SQL> select salary from employees where employee_id=100
  2  /

    SALARY
----------
    204600

SQL> rollback
  2
SQL> /

Rollback complete.

SQL> select salary from employees where employee_id=100
  2  /

    SALARY
----------
    204600

SQL> rollback
  2  /

Rollback complete.

SQL> select salary from employees where employee_id=100
  2  /

    SALARY
----------
    204600

SQL> eded
SP2-0042: unknown command "eded" - rest of line ignored.
SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= salary *(1+P_persent/100)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> execute raise_salary(120,30);

PL/SQL procedure successfully completed.

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE add_dept ( p_name departments.department_id%tpe, p_loc departments.location_id%type) IS
  2  BEGIN
  3  insert into departments (department_id,department_name, location_id)
  4  values (departments_seq.nextval,p_name,p_loc);
  5* END add_dept;
SQL> /

Warning: Procedure created with compilation errors.

SQL> show error
Errors for PROCEDURE ADD_DEPT:

LINE/COL ERROR
-------- -----------------------------------------------------------------
0/0      PL/SQL: Compilation unit analysis terminated
1/55     PLS-00208: identifier 'TPE' is not a legal cursor attribute
SQL> e
SP2-0042: unknown command "e" - rest of line ignored.
SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE add_dept ( p_name departments.department_id%type, p_loc departments.location_id%type) IS
  2  BEGIN
  3  insert into departments (department_id,department_name, location_id)
  4  values (departments_seq.nextval,p_name,p_loc);
  5* END add_dept;
SQL> /

Procedure created.

SQL> execute add_dept ('shohan', 1800);
BEGIN add_dept ('shohan', 1800); END;

*
ERROR at line 1:
ORA-06502: PL/SQL: numeric or value error: character to number conversion error
ORA-06512: at line 1


SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE add_dept ( p_name departments.department_name%type, p_loc departments.location_id%type) IS
  2  BEGIN
  3  insert into departments (department_id,department_name, location_id)
  4  values (departments_seq.nextval,p_name,p_loc);
  5* END add_dept;
SQL> /

Procedure created.

SQL> execute add_dept ('shohan', 1800);

PL/SQL procedure successfully completed.

 select * from departments;



create or replace function get_sal(p_id employees.employee_id%type, p_sal out employees.salary%type) return employees.salary%type is
 v_sal employees.salary%type;
begin
select salary into v_sal
from employees
where employee_id= p_id;
return  v_sal ;
end get_sal;
/



  create or replace function get_sal(p_id employees.employee_id%type) return number is
   v_sal employees.salary%type;
  begin
  select salary into v_sal
  from employees
  where employee_id= p_id;
  return  v_sal ;
  end get_sal;


 variable b_sal number
 execute :b_sal:=get_sal(120);





 create or replace function tax (p_sal employees.salary%type) return number is
 begin
 return (p_sal*.08);
 end tax;
/


 select salary,tax(salary)
 from employees;








  create or replace function get_job (p_id jobs.job_id%type) return number is
  v_job jobs.job_title%type;
  begin
  select job_title into v_job
  from jobs
 where job_id =p_id;
 return v_job;
 end get_job;


variable b_job varchar2(15)
execute :b_job :=get_job('IT_PROG');
BEGIN :b_job :=get_job('IT_PROG'); END;


create or replace function get_job (p_id jobs.job_id%type) return jobs.job_title%type is
v_job jobs.job_title%type;
 begin
  select job_title into v_job
 from jobs
where job_id =p_id;
 return v_job;
 end get_job;
/





SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE ADD_JOB(P_ID JOBS.JOB_ID%TYPE, P_TITLE JOBS.JOB_TITLE%TYPE) IS
  2  BEGIN
  3  INSERT INTO JOBS ( JOB_ID, JOB_TITLE)
  4  VALUES (P_ID,P_TITLE);
  5* END ADD_JOB;
SQL> /

Procedure created.

SQL> CXECUTE ADD_JOB('IT_PROGG', 'SHOAN');
SP2-0734: unknown command beginning "CXECUTE AD..." - rest of line ignored.
SQL> EXECUTE ADD_JOB('IT_PROGG', 'SHOAN');

PL/SQL procedure successfully completed.

SQL> SELECT * FRM JOBS WHERE JOB_ID='IT_PROGG';
SELECT * FRM JOBS WHERE JOB_ID='IT_PROGG'
         *
ERROR at line 1:
ORA-00923: FROM keyword not found where expected


SQL> ED
Wrote file afiedt.buf

  1* SELECT * FROM JOBS WHERE JOB_ID='IT_PROGG'
SQL> /

JOB_ID     JOB_TITLE                           MIN_SALARY MAX_SALARY
---------- ----------------------------------- ---------- ----------
IT_PROGG   SHOAN

SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE UPD_JOB(P_ID JOBS.JOB_ID%TYPE, P_TITLE JOBS.JOB_TITLE%TYPE) IS
  2  BEGIN
  3  UPDATE JOBS
  4  SET JOB_TITLE= 'NOOR VAI'
  5  WHERE JOB_ID='IT_PROGG';
  6* END ADD_JOB;
SQL> /

Warning: Procedure created with compilation errors.

SQL> SHOW ERROR
Errors for PROCEDURE UPD_JOB:

LINE/COL ERROR
-------- -----------------------------------------------------------------
6/5      PLS-00113: END identifier 'ADD_JOB' must match 'UPD_JOB' at line
         1, column 11

SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE UPD_JOB(P_ID JOBS.JOB_ID%TYPE, P_TITLE JOBS.JOB_TITLE%TYPE) IS
  2  BEGIN
  3  UPDATE JOBS
  4  SET JOB_TITLE= 'NOOR VAI'
  5  WHERE JOB_ID='IT_PROGG';
  6* END UPD_JOB;
SQL> /

Procedure created.

SQL> EXECUTE UPD_JOB
BEGIN UPD_JOB; END;

      *
ERROR at line 1:
ORA-06550: line 1, column 7:
PLS-00306: wrong number or types of arguments in call to 'UPD_JOB'
ORA-06550: line 1, column 7:
PL/SQL: Statement ignored


SQL> EXECUTE UPD_JOB;
BEGIN UPD_JOB; END;

      *
ERROR at line 1:
ORA-06550: line 1, column 7:
PLS-00306: wrong number or types of arguments in call to 'UPD_JOB'
ORA-06550: line 1, column 7:
PL/SQL: Statement ignored


SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE UPD_JOB(P_ID JOBS.JOB_ID%TYPE, P_TITLE JOBS.JOB_TITLE%TYPE) IS
  2  BEGIN
  3  UPDATE JOBS
  4  SET JOB_TITLE= P_TITLE
  5  WHERE JOB_ID=P_ID;
  6* END UPD_JOB;
SQL> /

Procedure created.

SQL> EXECUTE UPD_JOB('IT_PROGG', 'NOOR VAIER BIA KHAMU');

PL/SQL procedure successfully completed.

SQL> SELECT * FROM JOBS WHERE JOB_ID='IT_PROGG';

JOB_ID     JOB_TITLE                           MIN_SALARY MAX_SALARY
---------- ----------------------------------- ---------- ----------
IT_PROGG   NOOR VAIER BIA KHAMU

SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE UPD_JOB(P_ID JOBS.JOB_ID%TYPE) IS
  2  BEGIN
  3  DELETE FROM JOBS
  4  WHERE JOB_ID=P_ID;
  5* END UPD_JOB;
SQL> /

Procedure created.

SQL> EXECUTE UPD_JOB('IT_PROGG');

PL/SQL procedure successfully completed.

SQL> SELECT * FROM JOBS WHERE JOB_ID='IT_PROGG';

no rows selected

SQL> ED
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE GET_EMPLOYEE(P_ID IN EMPLOYEES.EMPLOYEE_ID%TYPE, P_SAL OUT EMPLOYEES.SALARY%TYPE, P_name out employees.last_name%type) IS
  2  BEGIN
  3  select SALARY, last_name into P_SAL, P_name
  4  from employees
  5  where employee_id=P_ID;
  6* END GET_EMPLOYEE;
SQL> /

Procedure created.

SQL> variable b_sal number
SQL> variable b_name varchar2(15)
SQL> execute GET_EMPLOYEE(100, :b_sal,:b_name);

PL/SQL procedure successfully completed.

SQL> print

     B_SAL
----------
     15500


B_NAME
--------------------------------------------------------------------------------
King

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id,P_SAL EMPLOYEES.SALARY%TYPE, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= P_SAL*12 +(1*P_persent/100*P_SAL*12)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Warning: Procedure created with compilation errors.

SQL> show error
Errors for PROCEDURE RAISE_SALARY:

LINE/COL ERROR
-------- -----------------------------------------------------------------
0/0      PL/SQL: Compilation unit analysis terminated
1/30     PLS-00488: 'EMPLOYEES.EMPLOYEE_ID' must be a type
SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type,P_SAL EMPLOYEES.SALARY%TYPE, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= P_SAL*12 +(1*P_persent/100*P_SAL*12)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= salary*12 +(1*P_persent/100*salary*12)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> execute raise_salary(100,10);

PL/SQL procedure successfully completed.

SQL> select salary from employees where employee_id=100;

    SALARY
----------
    204600

SQL> execute raise_salary(100,10);
BEGIN raise_salary(100,10); END;

*
ERROR at line 1:
ORA-01438: value larger than specified precision allowed for this column
ORA-06512: at "HR.RAISE_SALARY", line 3
ORA-06512: at line 1


SQL> execute raise_salary(100,20);
BEGIN raise_salary(100,20); END;

*
ERROR at line 1:
ORA-01438: value larger than specified precision allowed for this column
ORA-06512: at "HR.RAISE_SALARY", line 3
ORA-06512: at line 1


SQL> rollback
  2  /

Rollback complete.

SQL>
SQL> select salary from employees where employee_id=100;

    SALARY
----------
     15500

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= salary*12 +(1*P_persent/100*salary*12)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> execute raise_salary(100,10);

PL/SQL procedure successfully completed.

SQL> select salary from employees where employee_id=100;

    SALARY
----------
    204600

SQL> ed
Wrote file afiedt.buf

  1* select salary from employees where employee_id=100
SQL> /

    SALARY
----------
    204600

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= salary*12 +(1+P_persent/100*salary*12)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> execute raise_salary(100,10);
BEGIN raise_salary(100,10); END;

*
ERROR at line 1:
ORA-01438: value larger than specified precision allowed for this column
ORA-06512: at "HR.RAISE_SALARY", line 3
ORA-06512: at line 1


SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= salary *(1+P_persent/100)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> rollback
  2  /

Rollback complete.

SQL> select salary from employees where employee_id=100
  2  /

    SALARY
----------
    204600

SQL> rollback
  2
SQL> /

Rollback complete.

SQL> select salary from employees where employee_id=100
  2  /

    SALARY
----------
    204600

SQL> rollback
  2  /

Rollback complete.

SQL> select salary from employees where employee_id=100
  2  /

    SALARY
----------
    204600

SQL> eded
SP2-0042: unknown command "eded" - rest of line ignored.
SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary (p_id employees.employee_id%type, P_persent number) IS
  2  BEGIN
  3  update employees
  4  set salary= salary *(1+P_persent/100)
  5  where employee_id=p_id;
  6* END raise_salary;
SQL> /

Procedure created.

SQL> execute raise_salary(120,30);

PL/SQL procedure successfully completed.

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE add_dept ( p_name departments.department_id%tpe, p_loc departments.location_id%type) IS
  2  BEGIN
  3  insert into departments (department_id,department_name, location_id)
  4  values (departments_seq.nextval,p_name,p_loc);
  5* END add_dept;
SQL> /

Warning: Procedure created with compilation errors.

SQL> show error
Errors for PROCEDURE ADD_DEPT:

LINE/COL ERROR
-------- -----------------------------------------------------------------
0/0      PL/SQL: Compilation unit analysis terminated
1/55     PLS-00208: identifier 'TPE' is not a legal cursor attribute
SQL> e
SP2-0042: unknown command "e" - rest of line ignored.
SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE add_dept ( p_name departments.department_id%type, p_loc departments.location_id%type) IS
  2  BEGIN
  3  insert into departments (department_id,department_name, location_id)
  4  values (departments_seq.nextval,p_name,p_loc);
  5* END add_dept;
SQL> /

Procedure created.

SQL> execute add_dept ('shohan', 1800);
BEGIN add_dept ('shohan', 1800); END;

*
ERROR at line 1:
ORA-06502: PL/SQL: numeric or value error: character to number conversion error
ORA-06512: at line 1


SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE add_dept ( p_name departments.department_name%type, p_loc departments.location_id%type) IS
  2  BEGIN
  3  insert into departments (department_id,department_name, location_id)
  4  values (departments_seq.nextval,p_name,p_loc);
  5* END add_dept;
SQL> /

Procedure created.

SQL> execute add_dept ('shohan', 1800);

PL/SQL procedure successfully completed.

SQL> select * from departments;

DEPARTMENT_ID DEPARTMENT_NAME                MANAGER_ID LOCATION_ID
------------- ------------------------------ ---------- -----------
          290 NOC                                   100        1200
          300 shohan                                           1200
          630 Education
           10 Administration                        200        1700
           20 Marketing                             201        1800
           30 Purchasing                            114        1700
           40 Human Resources                       203        2400
           50 Shipping                              121        1500
           60 IT                                    103        1400
           70 Public Relations                      204        2700
           80 Sales                                 145        2500

DEPARTMENT_ID DEPARTMENT_NAME                MANAGER_ID LOCATION_ID
------------- ------------------------------ ---------- -----------
           90 Executive                             100        1700
          100 Finance                               108        1700
          110 Accounting                            205        1700
          120 Treasury                                         1700
          130 Corporate Tax                                    1700
          140 Control And Credit                               1700
          150 Shareholder Services                             1700
          160 Benefits                                         1700
          170 Manufacturing                                    1700
          180 Construction                                     1700
          190 Contracting                                      1700

DEPARTMENT_ID DEPARTMENT_NAME                MANAGER_ID LOCATION_ID
------------- ------------------------------ ---------- -----------
          200 Operations                                       1700
          210 IT Support                                       1700
          220 NOC                                              1700
          230 IT Helpdesk                                      1700
          240 Government Sales                                 1700
          250 Retail Sales                                     1700
          260 Recruiting                                       1700
          270 Payroll                                          1700
          310 shohan                                           1800
          600 Test Dept
          610 test dept1                            120        1200

DEPARTMENT_ID DEPARTMENT_NAME                MANAGER_ID LOCATION_ID
------------- ------------------------------ ---------- -----------
          620 test dept2

34 rows selected.

SQL> ed
Wrote file afiedt.buf

  1  create or replace function get_sal(p_id employees.employee_id%type, p_sal out employees.salary%type) return employees.salary%type is
  2   v_sal employees.salary%type
  3  begin
  4  select salary into v_sal
  5  from employees
  6  where employee_id= p_id;
  7  return  v_sal ;
  8* end get_sal;
SQL> /

Warning: Function created with compilation errors.

SQL> show error
Errors for FUNCTION GET_SAL:

LINE/COL ERROR
-------- -----------------------------------------------------------------
3/1      PLS-00103: Encountered the symbol "BEGIN" when expecting one of
         the following:
         := ( ; not null range default character
         The symbol ";" was substituted for "BEGIN" to continue.

SQL> ed
Wrote file afiedt.buf

  1  create or replace function get_sal(p_id employees.employee_id%type, p_sal out employees.salary%type) return employees.salary%type is
  2   v_sal employees.salary%type;
  3  begin
  4  select salary into v_sal
  5  from employees
  6  where employee_id= p_id;
  7  return  v_sal ;
  8* end get_sal;
SQL> /

Function created.

SQL> variable b_sal number
SQL> execute :b_sal:=get_sal(120);
BEGIN :b_sal:=get_sal(120); END;

               *
ERROR at line 1:
ORA-06550: line 1, column 16:
PLS-00306: wrong number or types of arguments in call to 'GET_SAL'
ORA-06550: line 1, column 7:
PL/SQL: Statement ignored


SQL> ed
Wrote file afiedt.buf

  1  create or replace function get_sal(p_id employees.employee_id%type) return number is
  2   v_sal employees.salary%type;
  3  begin
  4  select salary into v_sal
  5  from employees
  6  where employee_id= p_id;
  7  return  v_sal ;
  8* end get_sal;
SQL> /

Function created.

SQL> variable b_sal number
SQL> execute :b_sal:=get_sal(120);

PL/SQL procedure successfully completed.

SQL> ed
Wrote file afiedt.buf

  1  create or replace function tax (p_sal employees.salary%type) return number is
  2  begin
  3  return (p_sal*.08);
  4* end tax;
SQL> /

Function created.

SQL> select salary,tax(salary)
  2  from employees;

    SALARY TAX(SALARY)
---------- -----------
    204600       16368
     17000        1360
     17000        1360
      9000         720
      6000         480
      4800         384
      4800         384
      4200         336
     12008      960.64
      9000         720
      8200         656

    SALARY TAX(SALARY)
---------- -----------
      7700         616
      7800         624
      6900         552
     11000         880
      3100         248
      2900         232
      2800         224
      2600         208
      2500         200
     10400         832
      8200         656

    SALARY TAX(SALARY)
---------- -----------
      7900         632
      6500         520
      5800         464
      3200         256
      2700         216
      2400         192
      2200         176
      3300         264
      2800         224
      2500         200
      2100         168

    SALARY TAX(SALARY)
---------- -----------
      3300         264
      2900         232
      2400         192
      2200         176
      3600         288
      3200         256
      2700         216
      2500         200
      3500         280
      3100         248
      2600         208

    SALARY TAX(SALARY)
---------- -----------
      2500         200
     14000        1120
     13500        1080
     12000         960
     11000         880
     10500         840
     10000         800
      9500         760
      9000         720
      8000         640
      7500         600

    SALARY TAX(SALARY)
---------- -----------
      7000         560
     10000         800
      9500         760
      9000         720
      8000         640
      7500         600
      7000         560
     10500         840
      9500         760
      7200         576
      6800         544

    SALARY TAX(SALARY)
---------- -----------
      6400         512
      6200         496
     11500         920
     10000         800
      9600         768
      7400         592
      7300         584
      6100         488
     11000         880
      8800         704
      8600         688

    SALARY TAX(SALARY)
---------- -----------
      8400         672
      7000         560
      6200         496
      3200         256
      3100         248
      2500         200
      2800         224
      4200         336
      4100         328
      3400         272
      3000         240

    SALARY TAX(SALARY)
---------- -----------
      3800         304
      3600         288
      2900         232
      2500         200
      4000         320
      3900         312
      3200         256
      2800         224
      3100         248
      3000         240
      2600         208

    SALARY TAX(SALARY)
---------- -----------
      2600         208
      4400         352
     13000        1040
      6000         480
      6500         520
     10000         800
     12008      960.64
      8300         664
      4500         360

108 rows selected.

SQL> ed
Wrote file afiedt.buf

  1  create or replace function get_job (p_id jobs.job_id%type) return number is
  2  v_job jobs.job_title%type;
  3  begin
  4  select job_title into v_job
  5  from jobs
  6  where job_id =p_id;
  7  return v_job;
  8* end tax;
SQL> /

Warning: Function created with compilation errors.

SQL> show error
Errors for FUNCTION GET_JOB:

LINE/COL ERROR
-------- -----------------------------------------------------------------
8/5      PLS-00113: END identifier 'TAX' must match 'GET_JOB' at line 1,
         column 10

SQL> ed
Wrote file afiedt.buf

  1  create or replace function get_job (p_id jobs.job_id%type) return number is
  2  v_job jobs.job_title%type;
  3  begin
  4  select job_title into v_job
  5  from jobs
  6  where job_id =p_id;
  7  return v_job;
  8* end get_job;
SQL> /

Function created.

SQL> variable b_job varchar2(15)
SQL> execute :b_job :=get_job('IT_PROG');
BEGIN :b_job :=get_job('IT_PROG'); END;

*
ERROR at line 1:
ORA-06502: PL/SQL: numeric or value error: character to number conversion error
ORA-06512: at "HR.GET_JOB", line 7
ORA-06512: at line 1


SQL> ED
Wrote file afiedt.buf

  1  create or replace function get_job (p_id jobs.job_id%type) return jobs.job_title%type is
  2  v_job jobs.job_title%type;
  3  begin
  4  select job_title into v_job
  5  from jobs
  6  where job_id =p_id;
  7  return v_job;
  8* end get_job;
SQL> /

Function created.

SQL> variable b_job varchar2(15)
SQL> execute :b_job :=get_job('IT_PROG');

PL/SQL procedure successfully completed.

SQL> ED
Wrote file afiedt.buf

  1  create or replace function GET_ANNAL_SAL (P_SAL EMPLOYEES.EMPLOYEES_ID%TYPE, P_COMM EMPLOYEES.COMMISSION_PCT) return NUMBER is
  2  begin
  3  RETURN (P_SAL*12+ NVL(P_COMM,0) * P_SAL*12);
  4* end GET_ANNAL_SAL;
SQL> /

Warning: Function created with compilation errors.

SQL> ED
Wrote file afiedt.buf

  1  create or replace function GET_ANNAL_SAL (P_SAL EMPLOYEES.EMPLOYEES_ID%TYPE, P_COMM EMPLOYEES.COMMISSION_PCT) return NUMBER is
  2  begin
  3  RETURN (P_SAL*12+ NVL(P_COMM,0) * P_SAL*12);
  4* end GET_ANNAL_SAL;
SQL> /

Warning: Function created with compilation errors.

SQL> SHOW ERROR
Errors for FUNCTION GET_ANNAL_SAL:

LINE/COL ERROR
-------- -----------------------------------------------------------------
0/0      PL/SQL: Compilation unit analysis terminated
1/41     PLS-00302: component 'EMPLOYEES_ID' must be declared
SQL> ED
Wrote file afiedt.buf

  1  create or replace function GET_ANNAL_SAL (P_SAL EMPLOYEES.EMPLOYEE_ID%TYPE, P_COMM EMPLOYEES.COMMISSION_PCT) return NUMBER is
  2  begin
  3  RETURN (P_SAL*12+ NVL(P_COMM,0) * P_SAL*12);
  4* end GET_ANNAL_SAL;
SQL> /

Warning: Function created with compilation errors.

SQL> SHOW ERROR
Errors for FUNCTION GET_ANNAL_SAL:

LINE/COL ERROR
-------- -----------------------------------------------------------------
0/0      PL/SQL: Compilation unit analysis terminated
1/66     PLS-00488: 'EMPLOYEES.COMMISSION_PCT' must be a type
SQL> ED
Wrote file afiedt.buf

  1  create or replace function GET_ANNAL_SAL (P_SAL EMPLOYEES.EMPLOYEE_ID%TYPE, P_COMM EMPLOYEES.COMMISSION_PCT%TYPE) return NUMBER is
  2  begin
  3  RETURN (P_SAL*12+ NVL(P_COMM,0) * P_SAL*12);
  4* end GET_ANNAL_SAL;
SQL> /

Function created.

SQL> SELECT SALARY, GET_ANNAL_SAL(SALARY, COMMISSION_PCT)
  2  FROM EMPLOYEES
  3  /

    SALARY GET_ANNAL_SAL(SALARY,COMMISSION_PCT)
---------- ------------------------------------
    204600                              2455200
     17000                               204000
     17000                               204000
      9000                               108000
      6000                                72000
      4800                                57600
      4800                                57600
      4200                                50400
     12008                               144096
      9000                               108000
      8200                                98400

    SALARY GET_ANNAL_SAL(SALARY,COMMISSION_PCT)
---------- ------------------------------------
      7700                                92400
      7800                                93600
      6900                                82800
     11000                               132000
      3100                                37200
      2900                                34800
      2800                                33600
      2600                                31200
      2500                                30000
     10400                               124800
      8200                                98400

    SALARY GET_ANNAL_SAL(SALARY,COMMISSION_PCT)
---------- ------------------------------------
      7900                                94800
      6500                                78000
      5800                                69600
      3200                                38400
      2700                                32400
      2400                                28800
      2200                                26400
      3300                                39600
      2800                                33600
      2500                                30000
      2100                                25200

    SALARY GET_ANNAL_SAL(SALARY,COMMISSION_PCT)
---------- ------------------------------------
      3300                                39600
      2900                                34800
      2400                                28800
      2200                                26400
      3600                                43200
      3200                                38400
      2700                                32400
      2500                                30000
      3500                                42000
      3100                                37200
      2600                                31200

    SALARY GET_ANNAL_SAL(SALARY,COMMISSION_PCT)
---------- ------------------------------------
      2500                                30000
     14000                               235200
     13500                               210600
     12000                               187200
     11000                               171600
     10500                               151200
     10000                               156000
      9500                               142500
      9000                               135000
      8000                               115200
      7500                               108000

    SALARY GET_ANNAL_SAL(SALARY,COMMISSION_PCT)
---------- ------------------------------------
      7000                                96600
     10000                               162000
      9500                               153900
      9000                               145800
      8000                               124800
      7500                               117000
      7000                               105000
     10500                               157500
      9500                               131100
      7200                                95040
      6800                                89760

    SALARY GET_ANNAL_SAL(SALARY,COMMISSION_PCT)
---------- ------------------------------------
      6400                                84480
      6200                                81840
     11500                               172500
     10000                               144000
      9600                               138240
      7400                               102120
      7300                               100740
      6100                                80520
     11000                               171600
      8800                               132000
      8600                               123840

    SALARY GET_ANNAL_SAL(SALARY,COMMISSION_PCT)
---------- ------------------------------------
      8400                               120960
      7000                                96600
      6200                                81840
      3200                                38400
      3100                                37200
      2500                                30000
      2800                                33600
      4200                                50400
      4100                                49200
      3400                                40800
      3000                                36000

    SALARY GET_ANNAL_SAL(SALARY,COMMISSION_PCT)
---------- ------------------------------------
      3800                                45600
      3600                                43200
      2900                                34800
      2500                                30000
      4000                                48000
      3900                                46800
      3200                                38400
      2800                                33600
      3100                                37200
      3000                                36000
      2600                                31200

    SALARY GET_ANNAL_SAL(SALARY,COMMISSION_PCT)
---------- ------------------------------------
      2600                                31200
      4400                                52800
     13000                               156000
      6000                                72000
      6500                                78000
     10000                               120000
     12008                               144096
      8300                                99600
      4500                                54000

108 rows selected.

SQL>

-- #############################################################################################################
-- #############################################################################################################
-- #############################################################################################################





-- #############################################################################################################
-- #############################################################################################################
-- ****************************************CHAPTER 2 plsql volume 1****************************************

-- #############################################################################################################
-- #############################################################################################################

CREAte , compile and invoke the ADD_JOB procedura and review the results
create a procedure called UPD_JOB to modify a job in the JOBS table;
create a procedure called DEL_JOB to delete a job from the JOBS table;

create a procedure called GET_EMPLOYEE to query the Employees TABLE;
create a procedure called RAISE_SALARY to increase the employee salary;
create a procedure called QUERY_EMP to query the employeee 





-- /1
CREATE OR REPLACE procedure ADD_JOB (p_id jobs.job_id%TYPE, p_title jobs.job_title%TYPE) IS 
BEGIN
insert into jobs (job_id, job_title)
values (p_id , p_title);
END ADD_JOB;
/
-- 2
CREATE OR REPLACE procedure UPD_JOB (p_id jobs.job_id%TYPE, p_title jobs.job_title%TYPE) IS 
BEGIN
UPDATE JOBS SET JOB_ID=p_id
WHERE job_title=p_title;
end UPD_JOB;
/
-- 3
CREATE OR REPLACE procedure DEL_JOB (p_id jobs.job_id%TYPE ) IS 
BEGIN
DELETE FROM  JOBS WHERE  JOB_ID=p_id;
end DEL_JOB;
/
-- 4

CREATE OR REPLACE procedure GET_EMPLOYEE (p_id IN employees.employee_id%TYPE,p_sal OUT employees.salary%TYPE, p_job OUT employees.job_id%TYPE) IS 
BEGIN

SELECT SALARY, job_id INTO p_sal, p_job
FROM EMPLOYEES
WHERE employee_id=p_id;

end GET_EMPLOYEE;
/

VARIABLE v_sal number 
VARIABLE v_job varchar2(15)
EXECUTE GET_EMPLOYEE (100,:v_sal, :v_job);

-- 5

CREATE OR REPLACE procedure RAISE_SALARY (p_id IN employees.employee_id%TYPE,
p_sal OUT employees.salary%TYPE) IS 
BEGIN

SELECT (SALARY+1000) INTO p_sal
FROM EMPLOYEES
WHERE employee_id=p_id;
end RAISE_SALARY;
/

VARIABLE v_sal NUMBER
VARIABLE v_sal NUMBER

-- 6








-- Creating procedures with the sql CREATE OR REPLACE statement
CREATE [OR REPLACE] PROCEDURE procecure_name
[(parameter1 [mode]) datatype1,
  parameter2 [mode]) datatype2,...]
  IS|AS    
--   plsql block
  [local_variable_declarations;...]
  BEGIN 
    --actions;
  END[procecure_name];
--plsql block


-- formal and actual parameters
-- Procedure definition, Formal_parameters
CREATE PROCEDURE raise_sal(p_id NUMBER, p_sal NUMBER) IS 
BEGIN
    ...
END raise_sal;

-- Procedure calling, Actual parameters (arguments)
v_emp_id:=100;
raise_sal(v_emp_id,2000)
-- procedural parameter Modes
CREATE PROCEDURE proc_name(param_name [mode] datatype)
-- using the IN parameter Mode 
CREATE OR REPLACE PROCEDURE raise_salary
(p_id IN employees. employee_id%TYPE,
p_percent IN NUMBER)
IS
BEGIN
    UPDATE employees
    SET salary=salary*(1+p_percent/100)
    WHERE employee_id=p_id;
END raise_salary;

SELECT salary FROM employees where employee_id=176;
EXECUTE raise_salary(176,10)


-- Using the OUT parameter Mode 
CREATE OR REPLACE PROCEDURE query_emp
(p_id IN employees. employee_id%TYPE,
p_name OUT employees.last_name%TYPE,
p_salary OUT employees.salary%TYPE) 
IS
BEGIN 
    SELECT last_name, salary INTO    p_name, p_salary
    FROM employees
    WHERE employee_id=p_id;
END query_emp;
/




SET SERVEROUTPUT ON
DECLARE 
    v_emp_name employees.last_name%TYPE;
    v_emp_sal employees.salary%TYPE;
BEGIN
    query_emp(171,v_emp_name, v_emp_sal);
    DBMS_OUTPUT.PUT_LINE(v_emp_name||' earns '||TO_CHAR(v_emp_sal,'$999,999.00'));--to char kore dilam jate salary number ta varchar hishebe ashe
END;
/

-- Using the IN OUT parameter mode 
CREATE OR REPLACE PROCEDURE format_phone
(p_phone_no IN OUT VARCHAR2) IS
BEGIN
    p_phone_no:='('||SUBSTR(p_phone_no,1,3)||
                ')'||SUBSTR(p_phone_no,1,3)||
                '-'||SUBSTR(p_phone_no,7);
END format_phone;
/

VARIABLE b_phone_no VARCHAR2(15)
EXECUTE :b_phone_no:='01704030009'
PRINT b_phone_no
EXECUTE format_phone(:b_phone_no)
PRINT b_phone_no

-- viewing the OUT parameters:
--  using the DBMS_OUTPUT.PUT_LINE subroutine
SET SERVEROUTPUT ON

DECLARE
    v_emp_name employees.last_name%TYPE;
    v_emp_sal employees.salary%TYPE;
BEGIN
    query_emp(171,v_emp_name, v_emp_sal);
    DBMS_OUTPUT.PUT_LINE('Name: '||v_emp_name);
    DBMS_OUTPUT.PUT_LINE('Salary: '||v_emp_sal);
END;

-- viewing OUT parameters 
VARIABLE b_name VARCHAR2(25)
VARIABLE b_sal NUMBER
EXECUTE b_name b_sal


-- passing Actual Parameters:
-- creating the add_dept procedure
CREATE OR REPLACE PROCEDURE add_dept(
    p_name IN departments.department_name%TYPE,
    p_loc IN departments.location_id%TYPE)
    IS
    BEGIN
        INSERT INTO departments(department_id,department_name,location_id)
        VALUES (departments_seq.NEXTVAL,p_name,p_loc);
    END add_dept;
    /

    -- Passing Actual Parameters 
    -- Passing Actual Parameters using the Positional notation.
    EXECUTE add_dept('TRAINING',2500)

   -- Passing Actual Parameters using the named notation.
   EXECUTE add_dept(p_loc=>2400,p_name=>'EDUCATION')
    -- Using the DEFAULT option for the parameters
    CREATE OR REPLACE PROCEDURE add_dept(
        p_name departments.department_name%TYPE:='Unknown',
        p_loc departments.location_id%TYPE DEFAULT 1700)
    IS 
    BEGIN
        INSERT INTO departments(department_id, department_name,location_id)
        VALUES(departments_seq.NEXTVAL,p_name,p_loc);
    END add_dept;
    /

    EXECUTE add_dept
    EXECUTE add_dept ('ADVERTISING',p_loc=>1200)
    EXECUTE add_dept (p_loc=>1200)

    select department_id, department_name, location_id from departments;

    -- Calling procedures
    CREATE OR REPLACE PROCEDURE process_employees
    IS 
        CURSOR cur_emp_cursor IS
        SELECT employee_id
        FROM employees;
    BEGIN
        FOR emp_rec IN cur_emp_cursor
        LOOP
            raise_salary(emp_rec.employee_id,10);
        END LOOP;
        COMMIT;
    END process_employees;
    /
    EXECUTE process_employees;
    -- Handled Exceptions
    CREATE PROCEDURE add_department(
        p_name VARCHAR2,p_mgr NUMBER,p_loc NUMBER) IS  
    BEGIN 
        INSERT INTO departments(department_id,department_name, manager_id, location_id)
        VALUES (departments_seq.NEXTVAL,p_name,p_mgr,p_loc);
        DBMS_OUTPUT.PUT_LINE('Added Dept:'||p_name);
    EXCEPTION
        WHEN OTHERS THEN   
        DBMS_OUTPUT.PUT_LINE('Err: adding dept: '||p_name);
    END;
/
    CREATE PROCEDURE create_departments IS    
    BEGIN 
        add_department('Media',100,1800);
        add_department('Editing',99,1800);
        add_department('Advertising',101,1800);
    END;
/
-- Exceptions Not Handled 
SET SERVEROUTPUT ON 
CREATE PROCEDURE add_department_noex(
    p_name VARCHAR2,p_mgr NUMBER,p_loc NUMBER
) IS    
BEGIN
    INSERT INTO DEPARTMENTS(department_id,
    department_name,manager_id,location_id)
    VALUES(departments_seq.NEXTVAL,p_name,p_mgr,p_loc);
    DBMS_OUTPUT.PUT_LINE('Added Dept: '||p_name);
END;
/

CREATE PROCEDURE create_departments_noex IS     
BEGIN 
    add_department_noex ('Media',100,1800);
 add_department_noex ('Editing',99,1800);
 add_department_noex ('Advertising',101,1800);
END;
/
EXECUTE create_departments_noex;
-- removing procedures using the drop 
DROP Procedure raise_salary;

-- viewing procedure information using the data dictionary views 
DESCRIBE user_source

SELECT text 
FROM user_source
WHERE name='ADD_DEPT' AND type= 'PROCEDURE'
ORDER BY line;
-- Subprogram with a BOOLEAN Parameter
CREATE OR REPLACE PROCEDURE p(x BOOLEAN) AUTHID
CURRENT_USER AS   
BEGIN

    IF x THEN   
        DBMS_OUTPUT.PUT_LINE('x is true');
    END IF;
END;
/
DECLARE
b BOOLEAN:=TRUE;
BEGIN
    p(b);
    END;
    /



-- #############################################################################################################
--******************** Chapter 3 creating Funcitons and debugging subprograms
 -- #############################################################################################################


--  creating functions
CREATE  [OR REPLACE] FUCTION function_name
[(parameter1 [mode1] datatype1,...)]
RETURN datatype IS|AS    
[local_variable_declarations;
...]
BEGIN
    --actions;
    RETURN expression;
END [function_name];

-- Creating and Invoking a stored Function Using the CREATE FUNCTION statement
CREATE OR REPLACE FUNCTION get_sal
(p_id employees.employee_id%TYPE) RETURN NUMBER IS     
v_sal employees.salary%TYPE:=0;
BEGIN
    SELECT Salary
    INTO v_sal
    FROM employees
    WHERE employee_id=p_id;
    RETURN v_sal;
END get_sal;
/

-- Invoke the function as an expression or as 
-- a parameter value.
 EXECUTE  DBMS_OUTPUT.PUT_LINE(get_sal(100))

-- Using Different Methods for Executing Functions
-- As a PL/SQL expression , get the results using host variables
SET AUTOPRINT ON
VARIABLE b_salary NUMBER
EXECUTE :b_salary :=get_sal(100)

-- As a PL/SQL expression , get the results using a local variable
SET SERVEROUTPUT ON 
DECLARE 
sal employees.salary%TYPE;
BEGIN
    sal:=get_sal(100);
    DBMS_OUTPUT.PUT_LINE('The salary is: '||sal);
END;
/
-- Using different methods for executing functions
-- Use as a parameter to another subprogram
EXECUTE DBMS_OUTPUT.PUT_LINE(get_sal(100))

-- Use in a SQL statement (subject to restrictions)
SELECT job_id, get_sal(employee_id)
FROM employees;

-- Using a Function in a SQL expression
CREATE OR REPLACE FUNCTION tax(p_value IN NUMBER)  
RETURN NUMBER IS     
BEGIN 
    RETURN (p_value * 0.08);
END tax;
/
SELECT employee_id,last_name, salary,tax(salary)
FROM employees
WHERE department_id=100;


-- Calling User defined functions in sql statements
SELECT employee_id, tax(salary)
FROM employees
WHERE tax(salary)>(SELECT MAX(tax(salary))
                    FROM employees
                    WHERE department_id =30)
ORDER BY tax(Salary) desc;

-- Restrictions on calling  functions from sql

CREATE OR REPLACE FUCTION dml_call_sql(p_sal NUMBER)
    RETURN NUMBER IS     
BEGIN 
    INSERT into employees( employee_id, last_name, email, hire_date,job_id,salary)
    VALUES( 1, 'Frost', 'jfrost@company.com',SYSDATE, 'SA_MAN',p_sal);
    RETURN (p_sal+100);
END;

UPDATE employees
    SET salary =dml_call_sql(2000)
WHERE employee_id =170;



-- 
CREATE OR REPLACE FUNCTION query_call_sql(p_a NUMBER )
RETURN NUMBER IS    
v_s NUMBER;
BEGIN 
    SELECT salary INTO    v_s FROM employees
    WHERE employee_id=170;
    RETURN (v_s+p_a);
END;


Update employees SET salary =query_call_sql(100)
WHERE employee_id =170;


-- Named and Mixed Notationj From sql
CREATE OR REPLACE FUNCTION f(
    p_parameter_1 IN NUMBER DEFAULT 1,
    p_parameter_e IN NUMBER DEFAULT 5)
RETURN NUMBER
IS     
v_var NUMBER;
BEGIN 
    v_var :=p_parameter_1+(p_parameter_5*2);
RETURN v_var;
END f;
/
SELECT f(p_parameter_5 =>10) FROM DUAL;

SELECT f(p_parameter_5 =>10) FROM DUAL;

DESCRIBE user_source

SELECT TEXT 
FROM user_source
WHERE type='FUNCTION'
ORDER BY line;


DROP function f;

-- Debugging pl/sql subprograms using the sql developer debugger
GRANT DEBUG ANY PROCEDURE TO ora61;
GRANT DEBUG CONNECT SESSION TO ora61 ;

-- the procedure function
create or replace procedure add_job_history (
    p_emp_id job_history.employee_id%TYPE
    p_start_date job_history.start_date%TYPE
    p_end_date job_history.end_date%TYPE
     p_job_id job_history.job_id%TYPE
     p_department_id job_history.department_id%type
)
IS
BEGIN
    INSERT INTO job_history(employee_id,start_date,end_date,job_id,department_id)
    VALUES(p_emp_id,p_start_date,p_end_date,p_job_id,p_department_id);
    END add_job_history;

    -- DEBUGGING a procedure
    CREATE OR REPLACE PROCEDURE emp_list(pmaxrows IN NUMBER) AS 
    CURSOR emp_cursor IS     
    SELECT d.department_name,
    e.employee_id,
    e.last_name,
    e.salary,
    e.commission_pct
    FROM departments d,
    employees e    
    WHERE d.department_id=e.department_id;
    emp_record emp_cursor %ROWTYPE ;
    type emp_tab_type IS TABLE OF emp_cursor %ROWTYPE INDEX BY BINARY_INTEGER;
    emp_tab emp_tab_type;
    i NUMBER :=1;
    v_city VARCHAR2(30);

    BEGIN 
        OPEN emp_cursor;
        FETCH emp_cursor
        INTO emp_record;
        emp_tab(i):=emp_record;
        WHILE (emp_cursor %FOUND )
            AND(i<=pmaxrows)
        LOOP 
            i:=i+1;
            FETCH emp_cursor
            INTO emp_record;
            emp_tab(i):=emp_record;
            v_city:=get_location(emp_record.department_name);
            DBMS_OUTPUT.PUT_LINE('Employee '|| emp_record.last_name||' Works in '||v_city);
        END LOOP;

        CLOSE emp_cursor   ;
        FOR j in REVERSE 1..i
        LOOP
            DBMS_OUTPUT.PUT_LINE(emp_tab(j).last_name);
        END LOOP;
        END emp_list;

-- Debugging a procedure creating a new get_location fucntion
CREATE OR REPLACE FUNCTION get_location(p_deptname IN varchar2)
 RETURN VARCHAR2 AS 
 v_loc_id NUMBER;
 v_city VARCHAR2(30);
 BEGIN
    SELECT d.location_id,
    l.city
    INTO v_loc_it,
    v_city
    FROM departments d, locations l 
    WHERE UPPER (department_name) = UPPER (p_deptname)
    AND d.location_id=l.location_id;
    RETURN v_city;
    END get_location; 
 /
 
 
 
 
 -- #############################################################################################################
 --                     ******************** Chapter 4 creating Packages************
-- #############################################################################################################
-- creating package
CREATE OR REPLACE PACKAGE test_pkg IS 
PROCEDURE add_dept(
    p_name VARCHAR2,
    p_loc NUMBER);
    FUNCTION tax(p_value IN NUMBER)
    RETURN NUMBER;
    END test_pkg;
    /
-- creating package body
    CREATE OR REPLACE PACKAGE BODY test_pkg IS     
    PROCEDURE add_dept(
        p_name VARCHAR2,
        p_loc NUMBER)
    IS 
    BEGIN
        INSERT INTO departments(department_id, department_name, location_id)
        VALUES (departments_seq.NEXTVAL, p_name, p_loc);
        END add_dept;
        FUNCTION tax (p_value IN NUMBER)
        RETURN NUMBER IS 
        BEGIN
            RETURN(p_value*0.08) ;
            END tax;
            END test_pkg;
            /
set serveroutput on;
-- executing the package
EXECUTE test_pkg.add_dept('TEST',1800);
EXECUTE test_pkg.add_dept('Ttsas',1800);
-- 
SELECT department_id, department_name, location_id FROM departments;




-- syntax
CREATE [OR REPLACE ] PACKAGE package_name IS|AS 
public type and variable declarations
subprogram specifications
END [package_name];

-- package specification
-- the package spec with a public variable and a 
-- public procedure that are accessible from outside the package.

CREATE OR REPLACE PACKAGE comm_pkg IS   
v_std_comm NUMBER :=0.10;--initialized to 0.10
Procedure reset_comm(p_new_comm NUMBER);
END comm_pkg;
/

--  CREATING A Package body

CREATE [OR REPLACE ]PACKAGE  BODY package_name IS|AS    
private type and variable declarations
subprogram bodies
[BEGIN initialization statements]
END [package_name];


-- example of a package body
CREATE OR REPLACE PACKAGE BODY comm_pkg IS     
FUNCTION validate (p_comm NUMBER ) RETURN BOOLEAN IS     
v_max_comm employees.commission_pct%TYPE;

BEGIN 
    SELECT MAX (commission_pct) INTO    v_max_comm
    FROM employees
    RETURN (p_comm BETWEEN 0.0 AND v_max_comm);
    END validate;

PROCEDURE reset_comm (p_new_comm NUMBER) IS 
    BEGIN
        IF validate(p_new_comm ) THEN   
            v_std_comm :=p_new_comm;--reset public var
        ELSE RAISE_APPLICATION_ERROR(
            -20210,'BAD COMMISSION'
        );
        END IF;
        END reset_comm;
        END comm_pkg;

        -- Warning: Package Body created with compilation errors.

-- invoking the Package subprograms
-- invoke a function within the same packages;
CREATE OR REPLACE PACKAGE BODY comm_pkg IS...
PROCEDURE reset_comm(p_new_comm NUMBER) IS    
BEGIN
    IF validate(p_new_comm) THEN
    v_std_comm:=p_new_comm;
    ELSE...
    END IF;
    END rese;
    END comm_pkg;
    -- invoke a package procedure from sql plus
    EXECUTE comm_pkg.reset_comm(0.15)
    -- invoke a package procedure in a different schema:
    EXECUTE scott.comm_pkg.reset_comm(0.15)

    -- ####### Creating and Using Bodiless packages
    CREATE OR REPLACE PACKAGE   global_consts IS    
    c_mile_2_kilo CONSTANT  NUMBER :=1.6093;
    c_kilo_2_mile  CONSTANT  NUMBER :=0.6214;
    c_yard_2_meter CONSTANT  NUMBER :=0.9144;
    c_meter_2_yard CONSTANT  NUMBER :=1.0936;
    END global_consts;

    SET SERVEROUTPUT ON   
    BEGIN
        DBMS_OUTPUT.PUT_LINE('20 miles = '||
        20*global_consts.c_mile_2_kilo|| ' Km');
    END;

    SET SERVEROUTPUT ON   
    CREATE FUNCTION mtr2yrd(p_m NUMBER) RETURN NUMBER IS 
    BEGIN
        RETURN(p_m*global_consts.c_meter_2_yard);
        END mtr2yrd;
        /
    EXECUTE DBMS_OUTPUT.PUT_LINE(mtr2yrd(1))

    -- Viewing Packages by Using the Data dictionary
    -- view the package specification.
    SELECT text 
    FROM user_source
    WHERE name='COMM_PKG' AND type='PACKAGE'
    ORDER BY LINE;

    -- view the package bidy.
    SELECT text   
    FROM user_source
    WHERE name='COMM_PKG' AND type='PACKAGE BODY'
    ORDER BY LINE;

    -- Remove the package specification and body
    DROP PACKAGE package_name;
    -- Remove the package body only
    DROP PACKAGE BODY package_name;

    lukeb.co/sql_jobs_db


 -- #############################################################################################################
 --                     ******************** Chapter 5 working with Packages************
-- #############################################################################################################
-- overloading procedures example (creating package specification)
CREATE OR REPLACE PACKAGE  dept_pkg IS
      PROCEDURE add_department
      (p_deptno departments.department_id%TYPE, p_name departments.department_name%TYPE:='Unknown',
      p_loc departments.location_id%TYPE:=1700);

      PROCEDURE add_department
      (p_deptno departments.department_id%TYPE, p_name departments.department_name%TYPE:='Unknown',
      p_loc departments.location_id%TYPE:=1700);
END dept_pkg;
/
-- overloading procedures example (creating the package body)
-- package body of package defined on previous slide.
CREATE OR REPLACE PACKAGE BODY dept_pkg IS 
PROCEDURE add_department --first procedure's declaration
(p_deptno departments.deparment_id%TYPE,
p_name departments.department_name%TYPE,
p_loc departments.location_id%TYPE:=1700) IS 
BEGIN
  INSERT INTO departments(deparment_id, department_name, location_id)
  VALUES(p_deptno, p_name, p_loc);
END add_department;
PROCEDURE
add_department--Second procedure's declaration
(p_name departments.department_name%TYPE:='Unknown'
p_loc departments.location_id%TYPE:=1700) IS
BEGIN
INSERT INTO departments (deparment_id, department_name, location_id) 
values(departments_seq.NEXTVAL, p_name, p_loc);
END add_department;
END dept_pkg;/


 -- #############################################################################################################
 --                     ******************** Chapter 6 working with Packages************
-- #############################################################################################################

 -- #############################################################################################################
 --                     ******************** Chapter 7 working with Packages************
-- #############################################################################################################

 -- #############################################################################################################
 --                     ******************** Chapter 8 working with Packages************
-- #############################################################################################################

 -- #############################################################################################################
 --                     ******************** Chapter 9 Creating Triggers ************
-- #############################################################################################################
trigger is a pl sql block stored in database like procedure function.
time specify kore rakhbe, jei specification diso shei shomoy trigger executable hobe. onekta alarm er moto.

time set kore rakhbe AUTOMATICALLY oi trigger e thaka pl sql code execute hobe.
condition set kore rakhba specified condition ghotle ba true hole trigger AUTOMATICALLY execute hoy.
a trigger is defined in table view schema . 

***  DML, DDL, database operation servererror, logon logoff, startup, shutdown
trigger 2 , database trigger(dml ddl occurs), APPLICATION trigger

use trigger for security, audit, data integrity, referencial integrity

simple dml before after instead of compound , non dml trigger 
trigger event type kon dml statement kokhon exevute hobe (insert update delete)

trigger body determine ki action perform korebe plsql blok naki CALL to procedure. 
create trigger statement diye trigger kokhon 

+



-- creating a trigger 
CREATE OR REPLACE trigger secure_emp 
before insert on employees
begin
IF (TO_CHAR (sysdate , 'DY') IN ('SAT', 'SUN')) OR (TO_CHAR(sysdate, 'HH24:MI') NOT BETWEEN '08:00' AND '18:00') THEN 
RAISE_APPLICATION_ERROR( -20500 ,'khankir pola kamer shomoy kaj koros na you dont have a life office hour e entry de');
end if ; 
END;
/

insert into employees (employee_id, last_name, first_name, email, hire_date, job_id, salary, department_id)
values(3004, 'Marc', 'manson', 'mmson', sysdate, 'IT_PROG', 5398893, 60);



-- Using conditional predicates
CREATE OR REPLACE TRIGGER secure_emp
BEFORE INSERT OR UPDATE OR DELETE ON employees
BEGIN
    IF (TO_CHAR(SYSDATE, 'DY') IN ('SAT', 'SUN') OR
       TO_CHAR(SYSDATE, 'HH24') NOT BETWEEN '08' AND '18') THEN
        IF DELETING THEN
            RAISE_APPLICATION_ERROR(-20503,
                'You may delete from EMPLOYEES table ' ||
                'only during normal business hours');
        ELSIF INSERTING THEN
            RAISE_APPLICATION_ERROR(-20500,
                'You may insert into EMPLOYEES table ' ||
                'only during normal business hours.');
        ELSIF UPDATING('SALARY') THEN
            RAISE_APPLICATION_ERROR(-20503,
                'You may update SALARY ' ||
                'only during normal business hours.');
        ELSE
            RAISE_APPLICATION_ERROR(-20504,
                'You may update EMPLOYEES table ' ||
                'only during normal business hours');
        END IF;
    END IF;
END;
/



CREATE OR REPLACE TRIGGER restrict_salary
BEFORE INSERT OR UPDATE OF salary ON employees
FOR EACH ROW
BEGIN
    IF NOT (:New.job_id IN('AD_PRES','AD_VP'))
    AND :NEW.salary>15000 THEN 
    RAISE_APPLICATION_ERROR(-20202,'Employee cannot earn more than $15000.');
    END IF;
    END;
/
    UPDATE employees
    SET salary =15500
    WHERE job_id='AD_PRES';




-- 
create table audit_emp(user_name varchar2(30),
time_stamp date,
ID number(6),
old_last_name varchar2(25),
new_last_name VARCHAR2(25),
old_title varchar2(10),
new_title varchar2(10),
old_salary number(8,2),
new_salary number(8,2))
/





CREATE OR REPLACE TRIGGER audit_emp_values
AFTER DELETE OR INSERT OR UPDATE ON employees
FOR EACH ROW
BEGIN
INSERT INTO audit_emp(user_name, time_stamp,id,old_last_name,new_last_name,old_title,new_title,old_salary,new_salary)
VALUES (USER,SYSDATE,:OLD.employee_id,:OLD.last_name,:NEW.last_name,:OLD.JOB_ID,:NEW.JOB_ID,:OLD.SALARY,:NEW.SALARY);
END;
/
-- #############################################################################################################
--                     ******************** Chapter 10 working with triggers ************
-- #############################################################################################################

-- #############################################################################################################
--                     ******************** Chapter 5 working with Packages************
-- #############################################################################################################
