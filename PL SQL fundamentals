pl sql fundamentals 
-- CHAPTER 7 Working with composite data type;
set autoprint on
set serveroutput on

flashback table v_emp_rec to before drop
--  creating a PL/SQL record
-- syntax
TYPE type_name IS RECORD 
    (field_declaration[,field_declaration]...);


IDENTIFIER type_name;
    field_declaration:
        field_name{field_type|variable%TYPE
        |table.coulumn%TYPE|table%ROWTYPE}
        [[NOT NULL]{:=|DEFAULT}expr]
--/syntax 
DECLARE
TYPE t_rec IS RECORD 
(v_sal number(8),
v_minsal number(8) DEFAULT 1000,
v_hire_date employees.hire_date%type,
v_recl employees%ROWTYPE);
v_myrec t_rec;
BEGIN
    v_myrec.v_sal :=v_myrec.v_minsal +500;
    v_myrec.v_hire_date := SYSDATE;
    SELECT * INTO v_myrec.v_recl
            FROM employees WHERE employee_id=100;
    DBMS_OUTPUT.PUT_LINE(v_myrec.v_recl.last_name||' '||
    TO_CHAR (v_myrec.v_hire_date)||' '||TO_CHAR(v_myrec.v_sal));
END;
/

CREATE TABLE retired_emps as select *%TYPE from employees; 
create table v_emp_rec as select * from employees;
TRUNCATE TABLE retired_emps; --removes all data from table 
DROP TABLE retired_emps;

CREATE TABLE retired_emps (empno NUMBER, ename VARCHAR2(45),job VARCHAR2(23),
mgr NUMBER, hiredate DATE, leavedate DATE,
 sal NUMBER, comm NUMBER, deptno NUMBER);


CREATE TABLE retired_emps (empno NUMBER(4), ename VARCHAR2(45),job VARCHAR2(9),
mgr NUMBER(4), hiredate DATE, leavedate DATE,
 sal NUMBER(7,2), comm NUMBER(7,2), deptno NUMBER(2));


-- 
DECLARE
v_employee_number number:=125;
v_emp_rec employees%ROWTYPE;

BEGIN


SELECT * INTO v_emp_rec FROM employees
WHERE employee_id=v_employee_number;
INSERT INTO retired_emps(empno, ename,job,
mgr, hiredate, leavedate,
 sal, comm, deptno)
VALUES(v_emp_rec.employee_id, v_emp_rec.last_name,v_emp_rec.job_id,
v_emp_rec.manager_id,v_emp_rec.hire_date,SYSDATE,
v_emp_rec.salary,v_emp_rec.commission_pct,v_emp_rec.department_id);


END;
/

-- INSERTING  a Record Using %ROWTYPE

DECLARE
v_employee_number number:=125;
v_emp_rec retired_emps%ROWTYPE;

BEGIN


SELECT employee_id, last_name, job_id, manager_id, hire_date, hire_date,salary, commission_pct,
department_id INTO v_emp_rec FROM employees;
WHERE employee_id=v_employee_number;
INSERT INTO retired_emps VALUES v_emp_rec;


END;
/

select * from retired_emps;

DECLARE

BEGIN
END;
/




DECLARE

BEGIN
END;
/


DECLARE

BEGIN
END;
/




DECLARE

BEGIN
END;
/


DECLARE

BEGIN
END;
/










-- CHAPTER 8 USING Explicit cursors

DECLARE
CURSOR c_emp_cursor IS
SELECT employee_id, last_name FROM employees
		WHERE department_id=30;
v_empno employees.employee_id%TYPE;
V_lname employees.last_name%TYPE;
BEGIN
	OPEN c_emp_cursor;
	FETCH c_emp_cursor INTO v_empno, v_lname;
	DBMS_OUTPUT.PUT_LINE (v_empno||' '||v_lname);
END;
/



DECLARE
CURSOR c_emp_cursor IS
SELECT employee_id, last_name FROM employees
		WHERE department_id=50; --eikhane dept id te change korlei moja hobe
v_empno employees.employee_id%TYPE;
V_lname employees.last_name%TYPE;
BEGIN
	OPEN c_emp_cursor;
    LOOP
	FETCH c_emp_cursor INTO v_empno, v_lname;
    EXIT WHEN c_emp_cursor%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE (v_empno||' '||v_lname);
    END LOOP;
END;
/


-- closing the cursor 
DECLARE
CURSOR c_emp_cursor IS
SELECT employee_id, last_name FROM  employees
WHERE department_id=50; --eikhane dept id te change korlei moja hobe
		
v_empno employees.employee_id%TYPE;
V_lname employees.last_name%TYPE;
BEGIN
	OPEN c_emp_cursor;
    LOOP
	FETCH c_emp_cursor INTO v_empno, v_lname;
    EXIT WHEN c_emp_cursor%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE (v_empno||' '||v_lname);
    END LOOP;
    CLOSE c_emp_cursor;
END;
/


-- 
DECLARE 
CURSOR c_emp_cursor  IS  
SELECT employee_id, last_name FROM  employees
WHERE department_id=30;
v_emp_record c_emp_cursor%ROWTYPE; --cursor based record 

BEGIN 
    OPEN c_emp_cursor ;
    LOOP
        FETCH c_emp_cursor INTO v_emp_record;
    EXIT WHEN c_emp_cursor%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE()



    DECLARE 
    CURSOR c_emp_cursor IS
    SELECT employee_id, last_name FROM employees
    WHERE department_id=30;
    BEGIN
        FOR v_emp_record IN c_emp_cursor
         LOOP
          DBMS_OUTPUT.PUT_LINE(v_emp_record.employee_id
          ||' '||v_emp_record.last_name);
         END LOOP;
    END;
    /
    -- IS OPEN cursor open ase kina oita test kore
    --%NOTFOUND cursor je row fetch korse,shey jodi oikhane data fetch na korte pare tahole notfound 1 tao painai
    -- ROWCOUNT cursor koyta shongkha fetch korse sheta return kore
    -- 

DECLARE
CURSOR c_emp_cursor IS
SELECT employee_id, last_name FROM  employees
ORDER BY employee_id;
		
v_emp_record c_emp_cursor%ROWTYPE;

BEGIN
	OPEN c_emp_cursor;
    LOOP
	FETCH c_emp_cursor INTO v_emp_record;
    EXIT WHEN c_emp_cursor%ROWCOUNT>10; --rowcount jehetu 10 deya hoise tai eikhane 10 row show korbe
	DBMS_OUTPUT.PUT_LINE (v_emp_record.employee_id||' '||v_emp_record.last_name);
    END LOOP;
    CLOSE c_emp_cursor;
END;
/

-- Cursor FOR Loops Using Subqueries
BEGIN
    FOR v_emp_record IN (SELECT employee_id, last_name FROM employees WHERE department_id=30)
    LOOP
        DBMS_OUTPUT.PUT_LINE(v_emp_record.employee_id||' '||v_emp_record.last_name);
    END LOOP;
END;
/



-- Cursors with parameters
DECLARE
CURSOR c_emp_cursor (deptno NUMBER) IS  
SELECT employee_id, last_name, department_id, job_id
FROM employees
WHERE department_id=deptno;

BEGIN
    FOR emp_record IN c_emp_cursor(10)
    LOOP
        DBMS_OUTPUT.PUT_LINE(emp_record.employee_id     ||' '||emp_record.last_name||' '||emp_record.department_id||' '||emp_record.job_id);
    END LOOP;
    FOR emp_record IN c_emp_cursor(30)
   LOOP
        DBMS_OUTPUT.PUT_LINE(emp_record.employee_id     ||' '||emp_record.last_name||' '||emp_record.department_id||' '||emp_record.job_id);
    END LOOP;
      FOR emp_record IN c_emp_cursor(50)

     LOOP
        DBMS_OUTPUT.PUT_LINE(emp_record.employee_id     ||' '||emp_record.last_name||' '||emp_record.department_id||' '||emp_record.job_id);
    END LOOP;
    END;
    /


-- using for update and WHERE CURRENT OF clause 

create table test_emp as select employee_id, job_id, salary
from employees where employee_id<114;

DECLARE
CURSOR c1 IS 
SELECT employee_id, job_id, salary
FROM test_emp FOR UPDATE;
emp_record test_emp%ROWTYPE;

BEGIN
OPEN c1 ;
LOOP  
    FETCH c1 INTO emp_record;
IF emp_record.job_id ='IT_PROG' THEN  
UPDATE test_emp
SET salary =emp_record.salary+1000
    WHERE CURRENT OF c1;--you can use WHERE CURRENT OF clause FOR UPDATE of WHERE clause for satisfy the partivular condition
END IF;
    EXIT WHEN c1%NOTFOUND;
END LOOP;
END;
/

