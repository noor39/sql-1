pl sql fundamentals 
-- CHAPTER 7 Working with composite data type;
set autoprint on
set serveroutput on

flashback table v_emp_rec to before drop
--  creating a PL/SQL record
-- syntax
TYPE type_name IS RECORD 
    (field_declaration[,field_declaration]...);


IDENTIFIER type_name;
    field_declaration:
        field_name{field_type|variable%TYPE
        |table.coulumn%TYPE|table%ROWTYPE}
        [[NOT NULL]{:=|DEFAULT}expr]
--/syntax 
DECLARE
TYPE t_rec IS RECORD 
(v_sal number(8),
v_minsal number(8) DEFAULT 1000,
v_hire_date employees.hire_date%type,
v_recl employees%ROWTYPE);
v_myrec t_rec;
BEGIN
    v_myrec.v_sal :=v_myrec.v_minsal +500;
    v_myrec.v_hire_date := SYSDATE;
    SELECT * INTO v_myrec.v_recl
            FROM employees WHERE employee_id=100;
    DBMS_OUTPUT.PUT_LINE(v_myrec.v_recl.last_name||' '||
    TO_CHAR (v_myrec.v_hire_date)||' '||TO_CHAR(v_myrec.v_sal));
END;
/

CREATE TABLE retired_emps as select *%TYPE from employees; 
create table v_emp_rec as select * from employees;
TRUNCATE TABLE retired_emps; --removes all data from table 
DROP TABLE retired_emps;

CREATE TABLE retired_emps (empno NUMBER, ename VARCHAR2(45),job VARCHAR2(23),
mgr NUMBER, hiredate DATE, leavedate DATE,
 sal NUMBER, comm NUMBER, deptno NUMBER);


CREATE TABLE retired_emps (empno NUMBER(4), ename VARCHAR2(45),job VARCHAR2(9),
mgr NUMBER(4), hiredate DATE, leavedate DATE,
 sal NUMBER(7,2), comm NUMBER(7,2), deptno NUMBER(2));


-- 
DECLARE
v_employee_number number:=125;
v_emp_rec employees%ROWTYPE;

BEGIN


SELECT * INTO v_emp_rec FROM employees
WHERE employee_id=v_employee_number;
INSERT INTO retired_emps(empno, ename,job,
mgr, hiredate, leavedate,
 sal, comm, deptno)
VALUES(v_emp_rec.employee_id, v_emp_rec.last_name,v_emp_rec.job_id,
v_emp_rec.manager_id,v_emp_rec.hire_date,SYSDATE,
v_emp_rec.salary,v_emp_rec.commission_pct,v_emp_rec.department_id);


END;
/

-- INSERTING  a Record Using %ROWTYPE

DECLARE
v_employee_number number:=125;
v_emp_rec retired_emps%ROWTYPE;

BEGIN


SELECT employee_id, last_name, job_id, manager_id, hire_date, hire_date,salary, commission_pct,
department_id INTO v_emp_rec FROM employees;
WHERE employee_id=v_employee_number;
INSERT INTO retired_emps VALUES v_emp_rec;


END;
/

select * from retired_emps;


-- Updating a Row in a Table by Using a Record

DECLARE
v_employee_number number:=125;
v_emp_rec retired_emps%ROWTYPE;

BEGIN


SELECT * INTO v_emp_rec FROM retired_emps
WHERE empno=v_employee_number;
v_emp_rec.leavedate:=CURRENT_DATE;
UPDATE retired_emps SET ROW =v_emp_rec WHERE
empno =v_employee_number;

END;
/

-- Steps to create an associative array
-- Syntax
TYPE type_name IS TABLE OF  
{column_type[NOT NULL]|variable%TYPE[NOT NULL]
|table.column%TYPE[NOT NULL]
|table%ROWTYPE}
INDEX BY {PLS_INTEGER|BINARY_INTEGER
|VARCHAR2(<size>)};
identifier type_name;

-- example
...
TYPE ename_table_type IS TABLE OF 
employees.last_name%TYPE
INDEX BY PLS_INTEGER;
...
ename_table ename_table_type;


-- Creating and accessing associative arrays
...
DECLARE
TYPE ename_table IS TABLE OF 
employees.last_name%TYPE
INDEX BY PLS_INTEGER;
TYPE hiredate_table_type IS TABLE OF DATE 
INDEX BY PLS_INTEGER;
ename_table ename_table_type;
hiredate_table hiredate_table_type;

BEGIN
ename_table(1) :='CAMERON';
hiredate_table(8):=SYSDATE+7;
IF ename_table.EXISTS(1) THEN 
INSERT INTO ...
...
END;
/
...

-- index by table of records open
DECLARE
TYPE dept_table_type
IS  
    TABLE OF departments%ROWTYPE INDEX BY VARCHAR2(20) ;
    dept_table dept_table_type ;
    -- Each element of dept_table is a record

BEGIN
    SELECT * INTO dept_table(1) FROM departments 
    WHERE department_id =10;
    DBMS_OUTPUT.PUT_LINE(dept_table(1).department_id||
    ' '||dept_table(1).department_name||
    ' '||dept_table(1).manager_id);
END;
/



-- index by table of records 
DECLARE
TYPE emp_table_type IS TABLE OF 
    employees%ROWTYPE INDEX BY PLS_INTEGER;
    my_emp_table emp_table_type;
    max_count NUMBER(3):=104;

BEGIN
    FOR i IN 100..max_count
    LOOP

        SELECT * INTO my_emp_table(i) FROM employees
        WHERE employee_id=i;

    END LOOP;
    FOR i IN my_emp_table.FIRST..my_emp_table.LAST
    LOOP 
        DBMS_OUTPUT.PUT_LINE(my_emp_table(i).last_name);
    END LOOP;



END;
/
-- NESTED TABLE SYNTAX
TYPE type_name IS TABLE OF  
{column_type|variable%TYPE
|table.column%TYPE}[NOT NULL]
|table.%ROWTYPE

-- 
TYPE location_type IS TABLE OF locations.city%TYPE;
offices location_type;

-- IF WE DONT INITIALIZE A NESTED TABLE ITS AUTOMATICALLY INITIALIZED TO NULL
    offices := location_type('Dhaka','Tokyo','Shanghai','Oxford');

    SET serveroutput on ;

    

DECLARE
 TYPE location_type IS TABLE OF locations.city%TYPE;
    offices location_type;
    table_count NUMBER;
    
BEGIN
    offices:=location_type('Dhaka','Tokyo','Shanghai','Oxford');

    FOR i in 1..offices.COUNT() 
    LOOP
        DBMS_OUTPUT.PUT_LINE(offices(i));
    END LOOP;
END;
/










-- CHAPTER 8 USING Explicit cursors

DECLARE
CURSOR c_emp_cursor IS
SELECT employee_id, last_name FROM employees
		WHERE department_id=30;
v_empno employees.employee_id%TYPE;
V_lname employees.last_name%TYPE;
BEGIN
	OPEN c_emp_cursor;
	FETCH c_emp_cursor INTO v_empno, v_lname;
	DBMS_OUTPUT.PUT_LINE (v_empno||' '||v_lname);
END;
/



DECLARE
CURSOR c_emp_cursor IS
SELECT employee_id, last_name FROM employees
		WHERE department_id=50; --eikhane dept id te change korlei moja hobe
v_empno employees.employee_id%TYPE;
V_lname employees.last_name%TYPE;
BEGIN
	OPEN c_emp_cursor;
    LOOP
	FETCH c_emp_cursor INTO v_empno, v_lname;
    EXIT WHEN c_emp_cursor%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE (v_empno||' '||v_lname);
    END LOOP;
END;
/


-- closing the cursor 
DECLARE
CURSOR c_emp_cursor IS
SELECT employee_id, last_name FROM  employees
WHERE department_id=50; --eikhane dept id te change korlei moja hobe
		
v_empno employees.employee_id%TYPE;
V_lname employees.last_name%TYPE;
BEGIN
	OPEN c_emp_cursor;
    LOOP
	FETCH c_emp_cursor INTO v_empno, v_lname;
    EXIT WHEN c_emp_cursor%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE (v_empno||' '||v_lname);
    END LOOP;
    CLOSE c_emp_cursor;
END;
/


-- 
DECLARE 
CURSOR c_emp_cursor  IS  
SELECT employee_id, last_name FROM  employees
WHERE department_id=30;
v_emp_record c_emp_cursor%ROWTYPE; --cursor based record 

BEGIN 
    OPEN c_emp_cursor ;
    LOOP
        FETCH c_emp_cursor INTO v_emp_record;
    EXIT WHEN c_emp_cursor%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE()



    DECLARE 
    CURSOR c_emp_cursor IS
    SELECT employee_id, last_name FROM employees
    WHERE department_id=30;
    BEGIN
        FOR v_emp_record IN c_emp_cursor
         LOOP
          DBMS_OUTPUT.PUT_LINE(v_emp_record.employee_id
          ||' '||v_emp_record.last_name);
         END LOOP;
    END;
    /
    -- IS OPEN cursor open ase kina oita test kore
    --%NOTFOUND cursor je row fetch korse,shey jodi oikhane data fetch na korte pare tahole notfound 1 tao painai
    -- ROWCOUNT cursor koyta shongkha fetch korse sheta return kore
    -- 

DECLARE
CURSOR c_emp_cursor IS
SELECT employee_id, last_name FROM  employees
ORDER BY employee_id;
		
v_emp_record c_emp_cursor%ROWTYPE;

BEGIN
	OPEN c_emp_cursor;
    LOOP
	FETCH c_emp_cursor INTO v_emp_record;
    EXIT WHEN c_emp_cursor%ROWCOUNT>10; --rowcount jehetu 10 deya hoise tai eikhane 10 row show korbe
	DBMS_OUTPUT.PUT_LINE (v_emp_record.employee_id||' '||v_emp_record.last_name);
    END LOOP;
    CLOSE c_emp_cursor;
END;
/

-- Cursor FOR Loops Using Subqueries
BEGIN
    FOR v_emp_record IN (SELECT employee_id, last_name FROM employees WHERE department_id=30)
    LOOP
        DBMS_OUTPUT.PUT_LINE(v_emp_record.employee_id||' '||v_emp_record.last_name);
    END LOOP;
END;
/



-- Cursors with parameters
DECLARE
CURSOR c_emp_cursor (deptno NUMBER) IS  
SELECT employee_id, last_name, department_id, job_id
FROM employees
WHERE department_id=deptno;

BEGIN
    FOR emp_record IN c_emp_cursor(10)
    LOOP
        DBMS_OUTPUT.PUT_LINE(emp_record.employee_id     ||' '||emp_record.last_name||' '||emp_record.department_id||' '||emp_record.job_id);
    END LOOP;
    FOR emp_record IN c_emp_cursor(30)
   LOOP
        DBMS_OUTPUT.PUT_LINE(emp_record.employee_id     ||' '||emp_record.last_name||' '||emp_record.department_id||' '||emp_record.job_id);
    END LOOP;
      FOR emp_record IN c_emp_cursor(50)

     LOOP
        DBMS_OUTPUT.PUT_LINE(emp_record.employee_id     ||' '||emp_record.last_name||' '||emp_record.department_id||' '||emp_record.job_id);
    END LOOP;
    END;
    /


-- using for update and WHERE CURRENT OF clause 

create table test_emp as select employee_id, job_id, salary
from employees where employee_id<114;

DECLARE
CURSOR c1 IS 
SELECT employee_id, job_id, salary
FROM test_emp FOR UPDATE;
emp_record test_emp%ROWTYPE;

BEGIN
OPEN c1 ;
LOOP  
    FETCH c1 INTO emp_record;
IF emp_record.job_id ='IT_PROG' THEN  
UPDATE test_emp
SET salary =emp_record.salary+1000
    WHERE CURRENT OF c1;--you can use WHERE CURRENT OF clause FOR UPDATE of WHERE clause for satisfy the partivular condition
END IF;
    EXIT WHEN c1%NOTFOUND;
END LOOP;
END;
/


-- CHAPTER 9  HANDLING EXCEPTION

DECLARE v_lname VARCHAR2(15);

BEGIN 
    SELECT last_name INTO v_lname
    FROM employees
    WHERE first_name='John';
     DBMS_OUTPUT.PUT_LINE('John''s last name is :'||v_lname);
END;
/
DECLARE 
v_lname VARCHAR2(15);
BEGIN 
    SELECT last_name INTO v_lname
    FROM employees
    WHERE first_name='John';

    DBMS_OUTPUT.PUT_LINE('John''s last name is :'||v_lname);
    EXCEPTION
    WHEN TOO_MANY_ROWS THEN  
    DBMS_OUTPUT.PUT_LINE('Your select statement retrieved multiple rows. consider using a cursor' );
END;
/













-- evidence ques
    -- create a pl/sql block to perform the following:
    a use the cursor FOR loop to operate on the data retrieved. if the salary of the employee is less than 5000 and if the manager id is either 101 or 124, display the massage "<<last_name>> Not Due for a raise"
    -- Otherwise, display the massage "<<last_name>>Not due for a raise" 

    --shohan 
DECLARE
    CURSOR emp_cursor IS 
        SELECT last_name, salary, manager_id 
        FROM employees
        where department_id=20;
BEGIN
    FOR emp_rec IN emp_cursor LOOP  -- Cursor FOR loop
        IF emp_rec.salary < 5000 
           AND (emp_rec.manager_id=101 OR emp_rec.manager_id= 124) 
        THEN
            DBMS_OUTPUT.PUT_LINE(
                emp_rec.last_name || ':  Due for a raise');
        ELSE
            DBMS_OUTPUT.PUT_LINE(
                emp_rec.last_name || ':  Not due for a raise');
        END IF;
    END LOOP;
END;
/

-- shohan

DECLARE
    CURSOR emp_cursor IS 
        SELECT last_name, salary, manager_id 
        FROM employees;
BEGIN
    FOR emp_rec IN emp_cursor LOOP  -- Cursor FOR loop
        IF emp_rec.salary < 5000 
           AND emp_rec.manager_id IN (101, 124) 
        THEN
            DBMS_OUTPUT.PUT_LINE(
                emp_rec.last_name || ':  Due for a raise');
        ELSE
            DBMS_OUTPUT.PUT_LINE(
                emp_rec.last_name || ':  Not due for a raise');
        END IF;
    END LOOP;
END;
/





-- create a pl/sql block that uses an explicit cursor to determine the loop n salaries of employees;
-- shohan



DECLARE
    -- 1. Declare explicit cursor
    CURSOR emp_salary_cursor IS
        SELECT salary
        FROM employees;
    
    v_salary employees.salary%TYPE;
BEGIN
    -- 2. Open the cursor
    OPEN emp_salary_cursor;
    
    LOOP
        -- 3. Fetch data from cursor
        FETCH emp_salary_cursor INTO v_salary;
        
        -- 4. Exit condition
        EXIT WHEN emp_salary_cursor%NOTFOUND;
        
        -- 5. Process data (display salary)
        DBMS_OUTPUT.PUT_LINE('Employee Salary: ' || TO_CHAR(v_salary, 'L99G999G999D00'));
    END LOOP;
    
    -- 6. Close the cursor
    CLOSE emp_salary_cursor;
END;
/

-- shohan \


DECLARE N Number :=5
CURSOR sal_cursor IS 
SELECT employee_id, salary
FROM employees
order by salary desc)
-- shohan 






-- create bkash transaction
CREATE TABLE bkash_transactions (
    transaction_id   NUMBER PRIMARY KEY,
    sender_msisdn    VARCHAR2(15),
    receiver_msisdn  VARCHAR2(15),
    amount           NUMBER(10,2),
    transaction_date DATE,
    status           VARCHAR2(20)
);

DECLARE
    v_transaction_id   NUMBER := 1001; -- Example ID (use a sequence in practice)
    v_sender_msisdn    VARCHAR2(15) := '017XXXXXXXX'; -- Sender's mobile number
    v_receiver_msisdn  VARCHAR2(15) := '019XXXXXXXX'; -- Receiver's mobile number
    v_amount           NUMBER(10,2) := 500.00; -- Amount to send
    v_status           VARCHAR2(20);
BEGIN
    -- Simulate balance check (replace with actual logic)
    -- For simplicity, assume sender has sufficient balance
    IF v_amount <= 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Invalid amount.');
    END IF;

    -- Insert the transaction
    INSERT INTO bkash_transactions (
        transaction_id,
        sender_msisdn,
        receiver_msisdn,
        amount,
        transaction_date,
        status
    ) VALUES (
        v_transaction_id,
        v_sender_msisdn,
        v_receiver_msisdn,
        v_amount,
        SYSDATE,
        'PENDING'
    );

    -- Simulate transaction processing
    -- (In reality, this would involve calling bKash's API)
    v_status := 'COMPLETED';
    
    -- Update transaction status
    UPDATE bkash_transactions
    SET status = v_status
    WHERE transaction_id = v_transaction_id;

    DBMS_OUTPUT.PUT_LINE('Transaction successful!');
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/


DECLARE
CURSOR c_emp IS  
    SELECT * FROM employees
    WHERE employee_id>300;
v_lname VARCHAR2(15);
r_emp employees%ROWTYPE;
BEGIN
/* SELECT * INTO r_emp FROM employees
WHERE employee_id>500;
SELECT last_name INTO v_lname
FROM employees
WHERE first_name='John';
DBMS_OUTPUT.PUT_LINE('John''s last name is :' ||v_lname);
*/
CLOSE c_emp;
EXCEPTION 
WHEN NO_DATA_FOUND THEN 
DBMS_OUTPUT.PUT_LINE('Select statement returned no data.');
WHEN TOO_MANY_ROWS THEN  
DBMS_OUTPUT.PUT_LINE('Select statement retreived multiple rows. Consider using a cursor.');
WHEN OTHERS THEN  
DBMS_OUTPUT.PUT_LINE('For all other errors.');
END;
/

DECLARE
CURSOR c_emp IS  
    SELECT * FROM employees
    WHERE employee_id>300;
v_lname VARCHAR2(15);
r_emp employees%ROWTYPE;
BEGIN
 SELECT * INTO r_emp FROM employees
WHERE employee_id>500;
SELECT last_name INTO v_lname
FROM employees
WHERE first_name='John';
DBMS_OUTPUT.PUT_LINE('John''s last name is :' ||v_lname);

CLOSE c_emp;
EXCEPTION 
WHEN NO_DATA_FOUND THEN 
DBMS_OUTPUT.PUT_LINE('Select statement returned no data.');
WHEN TOO_MANY_ROWS THEN  
DBMS_OUTPUT.PUT_LINE('Select statement retreived multiple rows. Consider using a cursor.');
WHEN OTHERS THEN  
DBMS_OUTPUT.PUT_LINE('For all other errors.');
END;
/



-- NON PREDEFINED ERROR TRAPPING


 BEGIN
     INSERT INTO departments (department_id, department_name)
     VALUES(280, NULL);
 END;
/



DECLARE 
e_insert_excep EXCEPTION ;
PRAGMA EXCEPTION_INIT(e_insert_excep, -01400);
BEGIN 
    INSERT INTO departments (department_id, department_name)
    VALUES(280, NULL);
    EXCEPTION 
    WHEN 
    e_insert_excep
    THEN 
        DBMS_OUTPUT.PUT_LINE('Insert operation failed');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
END;
/

-- PROPAGATING EXCEPTIONS IN A SUBBLOCK
DECLARE 
...
e_no_rows EXCEPTION;
e_integrity EXCEPTION;
PRAGMA EXCEPTION_INIT(e_integrity,-2292);
BEGIN 
    FOR c_record IN  emp_cursor 
    LOOP  
        BEGIN
            SELECT ...
            UPDATE ...
            IF SQL%NOTFOUND THEN   
            RAISE e_no_rows;
            END IF;
        END;
    END LOOP;

EXCEPTION
    WHEN e_integrity THEN...
    WHEN e_no_rows THEN...
END;
/

-- RAISE APPLICATION ERROR PROCEDURE  
-- SYNTAX(RAISE APPLICATION ERROR)
-- raise_application_erro(error_number, message[,{TRUE|FALSE}]); 

-- SYNTAX(RAISE )
-- RAISE EXCEPTION_NAME;

-- EXECUTABLE SECTION
BEGIN
...
DELETE FROM employees
    WHERE manager_id=v_mgr;
IF  SQL%NOTFOUND THEN   
RAISE_APPLICATION_ERROR(-20202,'This is not  a valid manager');
END IF;
...
-- EXCEPTION SECTION
...
EXCEPTION 
    WHEN  NO_DATA_FOUND THEN   
    RAISE_APPLICATION_ERROR(-20201,'Manager is not a valid employee.');
END;
/

DECLARE e_name EXCEPTION;
BEGIN
    ...
    DELETE FROM  employees
    WHERE last_name='Higgins';
    IF SQL%NOTFOUND THEN RAISE e_name;
    END IF;
EXCEPTION
    WHEN e_name THEN  
    RAISE_APPLICATION_ERROR(-20999,'This is not a valid last name');
    ...
    END;
    /




DECLARE
v_mgr number:=300;
e_mgr EXCEPTION;
PRAGMA EXCEPTION_INIT (e_mgr,-20202);
BEGIN
    delete  from employees 
    where manager_id=v_mgr;
    IF SQL%NOTFOUND THEN
    RAISE e_mgr;
    END IF;
    EXCEPTION
    WHEN  e_mgr THEN 
    RAISE_APPLICATION_ERROR(-20202, 'This is not a valid manager');
    END;
    /

    DECLARE
/*
ERROR at line 1:
ORA-20202: This is not a valid manager
ORA-06512: at line 13*/
-- evidence ques
    -- create a pl/sql block to perform the following:
    a use the cursor FOR loop to operate on the data retrieved. if the salary of the employee is less than 5000 and if the manager id is either 101 or 124, display the massage "<<last_name>> Not Due for a raise"
    -- Otherwise, display the massage "<<last_name>>Not due for a raise" 

    
DECLARE
    CURSOR emp_cursor IS 
        SELECT last_name, salary, manager_id 
        FROM employees;
BEGIN
    FOR emp_rec IN emp_cursor LOOP  -- Cursor FOR loop
        IF emp_rec.salary < 5000 
           AND emp_rec.manager_id =101 OR emp_rec.manager_id=  124 
        THEN
            DBMS_OUTPUT.PUT_LINE(
                emp_rec.last_name || ':  Due for a raise');
        ELSE
            DBMS_OUTPUT.PUT_LINE(
                emp_rec.last_name || ':  Not due for a raise');
        END IF;
    END LOOP;
END;
/

DECLARE 
cursor emp_cursor IS SELECT last_name, salary, job_id 
FROM employees
WHERE department_id=10;
BEGIN
    FOR emp_cursor IN emp_record
    IF  





-- create a pl/sql block that uses an explicit cursor to determine the loop n salaries of employees;

DECLARE
       CURSOR emp_salary_cursor IS
        SELECT salary
        FROM employees;
    
    v_salary employees.salary%TYPE;
BEGIN
    -- 2. Open the cursor
    OPEN emp_salary_cursor;
    
    LOOP
        -- 3. Fetch data from cursor
        FETCH emp_salary_cursor INTO v_salary;
        
        -- 4. Exit condition
        EXIT WHEN emp_salary_cursor%NOTFOUND;
        
        -- 5. Process data (display salary)
        DBMS_OUTPUT.PUT_LINE('Employee Salary: ' || TO_CHAR(v_salary, 'L99G999G999D00'));
    END LOOP;
    
    -- 6. Close the cursor
    CLOSE emp_salary_cursor;
END;
/

-- startup of device
sys as sysdba
sys
alter session set container=orclpdb;
alter pluggable database open;
conn hr/hr@orclpdb;
cl scr

hr/hr@orclpdb
